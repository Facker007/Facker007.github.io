[{"title":"vulnhub-Hacksudo Alien","date":"2021-08-15T09:06:00.000Z","url":"/2021/08/15/vulnhub-Hacksudo-Alien/","tags":[["vulnhub","/tags/vulnhub/"]],"categories":[["undefined",""]],"content":"之前用nmap跑出来三个端口，22,80,9000，忘记截图了，dirb扫描目录，查看有没有目录泄露 curl把备份文件读出来，查看到数据库的账号密码 查看当前用户是否可写，是Y（可写）。或者是secure_file_priv为空也是可写。 尝试执行命令 这边又写了个eval的一句话木马，然后用蚁剑的虚拟终端反弹到自己的机子上去 通过date -f /etc/shadow 读出来（未截图），在john爆破一波 在用这条命令查看有哪些二进制文件有suid权限find / -perm -u=s -type f 2&gt;/dev/null 对应上面那条解释的原理，详见 最后在网站找到提权方法./cpulimit -l 100 -f -- /bin/sh -p 其他参考：1.2.3."},{"title":"ce-tutorial-games","date":"2021-08-14T13:28:00.000Z","url":"/2021/08/14/ce-tutorial-games/","tags":[["CE","/tags/CE/"]],"categories":[["undefined",""]],"content":"第一关这题一开始搜的是子弹的数量，但并不是。发现他是已用掉的子弹计数的。故直接搜索 找改写的地址，ctrl+a,aop注入，注释掉add那行。即可实现无限子弹 第二关搜自己的生命值。 用nop替换掉在被攻击即可发现生命值不会掉 右键找到改动的地址，然后在攻击与被攻击 往下移，找到偏移量为70的时候，0,1,1。可判断1即代表电脑 aop注入。如果是电脑就血量变为0，实现秒杀 第三关不断调整位置，搜x的坐标（浮点）。再在内存区域旁边找到y的坐标 转成四字节的decimal，被杀的时候可以发现有两个0和1的转换。 拖下来，发现有个类似假死，有动画，但没死。 被改写的地址，反汇编-&gt;断点,跟踪10000条 折叠起我们进来看到的代码 这一条即是我们被碰撞时的代码。 je改为jmp，即可实现碰撞不死。"},{"title":"ce-turorial1-9","date":"2021-08-13T06:58:00.000Z","url":"/2021/08/13/ce-tutorial1-9/","tags":[["CE","/tags/CE/"]],"categories":[["undefined",""]],"content":"第二关直接搜4字节的精准值，按按钮不断变小。锁定一个值，拉下来，改到1000 第三关先设置扫描不确定的未知值，不断点击按钮，发现减去数字，在设置减少了多少。即可快速锁定值，改到5000。通关 第四关单双浮点数，切换-&gt;改写 第五关找到地址，F6（改写了这个地址），显示反汇编。把代表替换成nop 第六关搜地址找到绿色的静态地址。添加地址，复制刚才的静态地址即可 第七关找到地址，F6（改写了这个地址）。反汇编，ctrl+a呼出自动汇编，把sub那句注释掉，加上add并把后面的数字改为2，即可实现点击按钮+2。 第八关4重指针，不断指向。不断跳转。找到值，F5（访问的地址）。找偏移。计算器计算 这步就是添加地址，添加每一个指针的不同偏移 第九关点到查看内存，偏移为4，上方工具栏呼出结构分析。把地址列表里每个列表-4填入，ctrl+n生成结构 可以看到机器人的team为2。自己的为1 自动汇编，比较team是否为2，为2就把0赋值给eax，health变为0，直接死亡 这是另一种方法，F5给当前地址下断点，在点击攻击按钮，查看esi的变化。自己时esi不为1 当机器人的时候，esi都是1 机器人的时候，esi还是1 把esi和1比较，查看是否是机器人，如果是，就把0赋值给eax，health变为0"},{"title":"四旋翼无人机开坑-未填","date":"2021-08-08T02:33:00.000Z","url":"/2021/08/08/%E5%9B%9B%E6%97%8B%E7%BF%BC%E6%97%A0%E4%BA%BA%E6%9C%BA%E5%BC%80%E5%9D%91-%E6%9C%AA%E5%A1%AB/","tags":[["飞行器","/tags/%E9%A3%9E%E8%A1%8C%E5%99%A8/"]],"categories":[["undefined",""]],"content":"固定翼无人机 螺旋桨式无人机 喷气式无人机 飞行原理:在高速前进过程中，通过机翼上下气流和气压的不同，产生升力，保持无人机的飞行。 旋翼无人机 飞行原理:用一个或多个螺旋桨的高速转动产生升力，多螺旋桨还要通过多个螺旋桨的配合保持平衡，并控制无人机6个自由度方向的运动 四旋翼飞行器的主要优点: 拥有简单的机械结构 拥有稳定的飞行姿态 体积可以做小，可实现自主飞行器的小型化和微型化 4个电机，具有更大的载重力 四翼飞行器技术关键 总体设计优化: 选择合适的机架材料，减轻飞行器质量。综合考虑质量、尺寸、飞行速度和能耗。确保实现整体设计最优化 能源动力系统: 选择合适的电机和减速比，在兼顾最大效率和最大输出功率两项指标的前提下，将电机工作点配置在推荐运行区域内。 建立数学模型: 准确建立其在各种飞行状态下的数学模型。 飞行控制: 研制既能精确控制飞行器姿态，又具有较强抗干扰和环境自适应能力的姿态控制器是四旋翼飞行器研究的关键。 定位、导航与通信: 研制体积小、质量轻、功耗低、稳定可靠和抗干扰的通信链对微小型四旋翼飞行器技术 基本原理: 四旋翼飞行器通常有两种模式，即“十”字形模式与X形模式。 相邻的两个旋翼的转动方向相反，而在对角线上的两个电机的转动方向相同。升降运动 俯仰运动 横滚运动 偏航运动 四旋翼飞行器姿态表示 平衡控制算法 滤波算法 材料如下：四个有刷电机和螺旋桨（30以内）+机架（待定）+飞控板（f3 evo brush 100以内）+接收机及其遥控器（二手天地飞7+接收机 300以内）+电池（鹰氪coddar 50以内）+电烙铁 总价600+大概 参考链接1：ymengo-blog参考链接2：穿越机组装视频-可参考"},{"title":"bugku-pwn合集","date":"2021-08-02T13:49:00.000Z","url":"/2021/08/02/bugku-pwn%E5%90%88%E9%9B%86/","tags":[["bugku","/tags/bugku/"],["pwn","/tags/pwn/"]],"categories":[["undefined",""]],"content":" 瑞士军刀 overflow read_note repeater canary printf overflow2 瑞士军刀nc打开直接连接，cat flag即可 overflow打开看main主函数，发现一个输入，有两个输出。memset函数是在一段内存中填充某个给定的值，在这里是填充s。把48个0填充到变量s中。后面的read又读了100个长度，就可能会导致溢出 return时，执行系统命令cat flag。利用read函数进行栈溢出执行get_shell函数，把memset的s和rbp寄存器的值给覆盖掉，在写入get_shell函数的地址就可以了。 gdb运行，pattern_create 100创建完之后直接run运行。 pattern_offset寻找他的偏移量，顺便i r查看寄存器ascii编码语义下的A，是一个字节，0x6116进制语义下的0xAA是一个字节。所以这边的16/2=8+memset时候的30即可。 py脚本。payload构造0x30+0x8位的填充，在加上p64（指定程序64位的） "},{"title":"bugku-re-safebox","date":"2021-07-25T13:56:24.000Z","url":"/2021/07/25/bugku-re-safebox/","categories":[["undefined",""]],"content":"先模拟器打开软件查看界面，只有一个地方可以输入，其他地方应该是点不了。输入很多次都是停止运行 jeb打开先看mainactivility。看代码，在判断flag=1的时候可输出flag。 Integer.parseInt(((EditText)this.findViewById(0x7F0B0056)).getText().toString()这句其实就是接受那个输入框接受输入的值在转成int类型，把接受到的这个变量改成input。改写全局的变量 简化代码变成下面这样，方便分析。 可以根据java代码写出python暴力爆破脚本。 提交答案。是错误的…..看到别的androidtest类和mainactivity代码相似。 mainfest里可以看到有两个activity，多个Activity可以显示多个不同的界面，setContentView就是设置一个Activity的显示界面，使用setContentView可以在Activity中动态切换显示的View,这样，不需要多个Activity就可以显示不同的界面。 可以看到明显的调用id值 public.xml找到id对应的资源 在到layout文件夹里找到build.xml和activity_main.xml。010editor打开比较两个文件差异，发现相同。 在线diff一下，看一下两个类有什么不同 再根据之前diff的mainactivity和androidtest的不同，写一个androidtest类的脚本。跑出flag，提交正确 和之前的区别的话，就是内层的循环次数由4改为了3。还有最后的输出的chr的改变。 改为python2，并且把i的值改为正好输出的前一位，方便调试。以下值均满足第一个if条件但48533584可满足flag=1。 "},{"title":"bugku-re-easy-100","date":"2021-07-23T10:46:00.000Z","url":"/2021/07/23/bugku-re-easy-100/","tags":[["bugku","/tags/bugku/"],["re","/tags/re/"]],"categories":[["undefined",""]],"content":"OnCreate就是执行p函数，创建一个监听d类的onclick事件。而p函数就是读取url.png[144:160]的数据 mainactivity的代码 再来看d类，判断是否正确，正确就输出flag。if的第一个参数是this.a(句柄)，第二个是调用只有一个参数的a类a函数，第三个则是v0（我们输入的字符串） 在看a类的三个3函数第一个a函数只有一个参数，就是字符串v。就是图片[144:160]的数据第二个a函数有三个参数，调用了有两个参数的a函数第三个a函数有两个参数，arg4是v，arg5是输入的密码。调用c类的a函数和后面的做比较。如果相等就输出flag 再来看c类，就是对之前从图片里提出来的字符串在进行加工。主要就是置换，两位为一个单位来置换。 a类就是aes的加密 python解密脚本 也可以自己尝试提出url.png中的内容 自己可以用在线aes解密,python2写脚本。base64 encode加密完后丢解密网站，修改填充和加上密码。 程序逻辑：mainactivity-&gt;p()-&gt;d-&gt;a-&gt;c-&gt;脚本 脚本逻辑：取图片里的字符串-&gt;字符串置换-&gt;密文转hex-&gt;脚本closed 参考："},{"title":"bugku-re-NoString","date":"2021-06-30T09:50:00.000Z","url":"/2021/06/30/bugku-re-NoString/","tags":[["bugku","/tags/bugku/"],["re","/tags/re/"]],"categories":[["undefined",""]],"content":"查看字符串没有可疑或者可用的字符串，如题Nostring，没有字符串。可能加密了 进入主函数分析 解读关键主函数 查看和v11比较的字符串 逆过来异或9，跑出flag和aLF和aNA 参考链接：1、()2、()"},{"title":"bugku-re-First_Mobile","date":"2021-06-25T05:35:00.000Z","url":"/2021/06/25/bugku-re-First-Mobile/","tags":[["bugku","/tags/bugku/"],["re","/tags/re/"]],"categories":[["undefined",""]],"content":"直接反编译看mainactivity。监听，把输入的字符串传给encode.check()检查 跟到encode里 input是接收str转成的数组b是已经有的数组temp是空的16位的数组 在经过了运算之后temp[i]=((input[i]+b[i])%61)*2-i如果temp和str还相等，就返回true，输出correct。 写个脚本这个脚本是直接跑的，把每一位依次比较，正确就转成字母输出这里的80可以往大里改，算是爆破出来的参见 另一种脚本的写法也是爆破的，生成了所以的大小写和数字，一位一位爆破。参见 "},{"title":"bugku-re-mobile1和mobile2","date":"2021-05-27T12:32:00.000Z","url":"/2021/05/27/bugku-re-mobile1%E5%92%8Cmobile2/","tags":[["bugku","/tags/bugku/"],["re","/tags/re/"]],"categories":[["undefined",""]],"content":"1.mobile1onCreate中定义了一个click事件，看样子这个判断就是能不能出flag的地方，直接跟入checkSN函数。看下面的判断，arg11就是edit_username,arg12就是edit_sn。而edit_username已经写死了。就是Tenshine。 看checkSN就是应用md5加密arg11（edit_username），然后再在进行2位取。在加上flag{和}，即满足了arg11的长度不为0,且arg12不为空，arg12长度也等于12位 写脚本，加密Tenshine之后按2步长取最后的结果。 2.mobile2脑洞题。文件下下来解压就是如图。 xml文件不是xml。直接text形式查看。flag 6efd233c63b7d2"},{"title":"bugku-re-特殊的base64和不好用的ce","date":"2021-05-22T14:30:00.000Z","url":"/2021/05/22/bugku-re-%E7%89%B9%E6%AE%8A%E7%9A%84base64%E5%92%8C%E4%B8%8D%E5%A5%BD%E7%94%A8%E7%9A%84ce/","tags":[["bugku","/tags/bugku/"],["re","/tags/re/"]],"categories":[["undefined",""]],"content":"1.特殊的base64确实是特殊的base64，换表base64有一串末尾为==的字符串，还给了一串64位的表。就判断是base64换表了。 两个脚本都是换表的base64解法。 2.不好用的ce1.用网上的脚本vbs依次点击到1w次，或者自己写个按键精灵自己控制好次数，快到就要移开光标，自己点到1w 2.od边运行边调试 找到第一串字符串，因为“点击一万次”是第一个窗体的，后面的字符串才是主程序里的。 把文中所有的跳转都下上断点(F2)。 看到了je的大跳转已实现，判断就是主循环。 开始运行 更改为jnz或者直接nop掉，使其跳转未实现，继续开始就能输出flag 最后取的代码看起来像base64，其实是base58base编码家族区别 解密得到flag{c1icktimes} "},{"title":"bugku-re-马老师杀毒卫士","date":"2021-05-20T13:25:00.000Z","url":"/2021/05/20/bugku-re-%E9%A9%AC%E8%80%81%E5%B8%88%E6%9D%80%E6%AF%92%E5%8D%AB%E5%A3%AB/","tags":[["bugku","/tags/bugku/"],["re","/tags/re/"]],"categories":[["undefined",""]],"content":"这道题比较简单，顺便把前面的几道简单的也全放上来 目录列表 马老师杀毒卫士 入门逆向 Easy_Re Easy_vb 逆向入门 1.马老师杀毒卫士摸不着头脑的一道题吧，winspy++打开，查看句柄和窗口相关属性信息。看到一个隐藏的lable，像是flag栅栏的形式。在跟界面上的闪电三连鞭判断。直接常规栅栏三栏解开了题目。 2.入门逆向找到开始的语句，直接用r将十六进制转成字符串就可 3.Easy_Reod可以直接查看 ida的话，还需要r将16进制转换成字符串在倒序。 4.Easy_vbod打开直接能查看到 5.逆向入门不算逆向题，纯misc，base64的图片，嵌在html的img里，直接浏览器打开，扫码得到flag "},{"title":"bugku-re-Timer","date":"2021-05-18T15:08:00.000Z","url":"/2021/05/18/bugku-re-Timer/","tags":[["bugku","/tags/bugku/"],["re","/tags/re/"]],"categories":[["undefined",""]],"content":"直奔主题,jeb打开。看反汇编mainactivity的代码。直接看到flag结果的地方判断如果beg-now(当前时间)&lt;=0就输出正确的flag 往上看回调的mainactivity，beg生成就是当前时间+200000s。beg-now就相当于是200000s一直减当前过去的秒数。就是倒计时。 上面的flag输出的地方又涉及到了k。在下文k的计算又收到了is2函数的影响。直接跟进去看is2函数。可以自己写脚本计算k。把is2函数扒拉下来，在给他传参数。这里的脚本是网上copy来的。is2那边应该是老版本jeb反汇编的结果。我这里是新版本，就没有改脚本了 脚本中就是把time当做参数传给了is2。让is2来计算。如果返回的是true，就让k+100。如果返回false，k就-1。最后200000次之后。k的值被计算出来了 计算出k的值是1616384。打开android killer修改smail代码 进入主函数入口。搜索stringFromJNI2，直接定位输出k处，修改判断beg-now的代码。以及直接给定k的值 修改变量k的值，iget，把k存在了v3寄存器里。寄存器用v开头数字结尾的符号来表示 其格式为：iget 目标寄存器 源对象 变量签名。 我们直接用const把1616384赋值给v3。const v3,1616384 这里把最后的k值设置为了执行200000次后的正确值之后。但是并没有修改beg或者now的值。beg-now的判断。还是不成立的。不会输出flag。所以我们要把≤改成＞。但又因为代码里是相反的就把if-gtz(＞)改为if-lez(≤)。 编译签名，生成最后的apk。模拟器运行。一定要签名的。默认编译可能不签名，所以模拟器安装不上？ 最后参考1."},{"title":"bugku-re-love","date":"2021-05-18T14:39:00.000Z","url":"/2021/05/18/bugku-re-love/","tags":[["bugku","/tags/bugku/"],["re","/tags/re/"]],"categories":[["undefined",""]],"content":"字符串窗口找到关键right flag!字段，双击跟入，f5反汇编。看之后的代码。已经重命名了一些看的清楚的函数。先进行sub_4110be函数加密，在进行数组下标计算。 跟入sub_4110be函数即可发现，像是base64加密的函数 写脚本解决题目。因为上面是先进行base64的，然后在数组下标计算。所以脚本先进行数组下标的计算。在进行base64解密。"},{"title":"bugku-re-游戏过关","date":"2021-05-18T07:09:00.000Z","url":"/2021/05/18/bugku-re-%E6%B8%B8%E6%88%8F%E8%BF%87%E5%85%B3/","tags":[["bugku","/tags/bugku/"],["re","/tags/re/"]],"categories":[["undefined",""]],"content":"参考某师傅blog的wp一样四种方法。 1.直接玩游戏15786234直接通关 2.ida计算flagida打开，打开字符串窗口，找到关键字符串，双击跟入。在按x，交叉引用。f5转为反汇编，看到左下角的图。v2和v59是两个数组，ida并没有识别出来，直接在上面找到定义的时候。右键输入变量类型，改为数组的形式。 再把两个数组提出来，直接写脚本，异或两个数组内的值和0x13在异或，chr之后得到flag。 3.修改源码左上找到关键字符串flag。在找到上面输出flag的函数的入口。跟入跳转。在跟入本地调用。看到上面有8个jnz，就是判断8个灯是否亮的代码。一旦有1个没满足，就call回去原来的函数，重新要求你输入n玩游戏。只要把这里的jmp 0085f4b7（循环重新开始的位置）改成00857ab4（flag函数的入口地址）或者改成0085e940（输出flag的函数的路口）。 然后按如图保存即可。右键修改的代码，复制到可执行文件-&gt;选择，找到修改的代码保存文件。 运行结果 4.边调试边运行找到8个jnz的地方，给8条语句f2下上断点之后开始。8个jnz就是判断灯是否亮的代码。在ida里同样可以看到。 运行之后，输入n之后，f7单步运行，把8个jnz中的zf判断，哪个zf不为1，都改为1。zf就表示这里要跳转了。通过修改zf的值，来实现不跳转。 改完之后再运行。 "},{"title":"bugku-re-signin","date":"2021-05-11T14:40:00.000Z","url":"/2021/05/11/bugku-re-signin/","tags":[["bugku","/tags/bugku/"],["re","/tags/re/"]],"categories":[["undefined",""]],"content":"apk直接拖进jeb。按q反编译成java语言，方便解读。 下面那个OnCreate是按钮被点击的事件，会把你输入的那个窗口里的那个字符串当作参数传给checkPassword里去。getflag返回的就是资源ID对应的字符串。而checkPassword就是把getflag返回的字符串进行反转，在进行base64加密。PS：这里的jeb是3.1版本的，直接给出了相应资源ID对应的字符串。 没给出对应字符串，用apk改之理直接打开，全局搜索资源ID对应的16进制对应的字符串name 在全局搜索字符串name python脚本解决 成功截图"},{"title":"bugku-crypto-合集","date":"2021-05-08T15:11:00.000Z","url":"/2021/05/08/bugku-crypto-%E5%90%88%E9%9B%86/","tags":[["bugku","/tags/bugku/"],["crypto","/tags/crypto/"]],"categories":[["undefined",""]],"content":" /.- 聪明的小羊 ok [+-&lt;&gt;] 把猪困在猪圈里 你喜欢下棋吗 小山丘的秘密 EN-气泡 easy_crypto 你以为是md5吗 散乱的密文 简单加密 .!? 一段base64 (未写) 奇怪的密码 这不是md5 贝斯家族 告诉你个秘密 来自宇宙的信号 进制转换 抄错字符(未写) Crack it 一段新闻 你懂我的乐谱吗？ /.- morse解密，/为空格，.为短的，-为长的。 flag{d3fcbf17f9399504} 聪明的小羊fa{fe13f590lg6d46d0d0} 普通型栅栏密码，设置两栏–》 flag{6fde4163df05d900} ok Ook to text 解密 –&gt; flag{0a394df55312c51a} [+-&lt;&gt;] brainfuck解密-&gt;flag{0d86208ac54fbf12} 把猪困在猪圈里给的文件前面没有base64头，加上base64（data:image/jpg;base64,）头。 ，在线网站转换。在用猪圈密码转换。 flag{thisispigpassword} 你喜欢下棋吗看到下课，想到棋盘密码，应该是polybius 解出来看看，thi/jsi/jspolybi/jus，自己处理一下，thisispolybius 解出来文件看到提示 一种5bit的编码。百度到博多密码 在线解密  –》bugku{baud0tc0de} 小山丘的秘密bugku的小山丘，安恒的爬坡道 。都是hill  有密钥，字母表自写  矩阵性，字母表可选（A=0,A=1） 题目提示A=1，字母表就为”ZABCDEFGHIJKLMNOPQRSTUVWXY” Z=0，A=1，B=2。再把棋盘译出来，1-2-3-0-1-4-5-6-0。用字母表转掉就是A-B-C-Z-A-D-E-F-Z。abczadefz 这一步应该就是把矩阵转成了密钥。然后就直接可以带到在线网站了。填上去解密即可 解出答案为whatahill , bugku{whatahill} EN-气泡在线解不出来，写脚本吧 中文-气泡翻译bubble，可能是bubblepy 且密文开头为x，每5个字符中间以-来分隔。 bubblepy 算法信息  解出flag为bugku{th1s_1s_A_Bubb13} easy_crypto0和1一般都是morse了。可能是因为有unicode，所以有的网站会转不出来。所以自己写了个   flag{m0rse_code_1s_interest1n9!} 你以为是md5吗了解一下md5组成 加密完成后都是16进制的。故把题中的非16进制字符删除 bc177a7a9c7df69c248647b4dfc6fd84解密得到–》666666666666 散乱的密文描述说：lf5{ag024c483549d7fd@@1} 一张纸条上凌乱的写着2 1 6 5 3 4 开头应该是flag{开头的，判断可能位置是215643，置换密码写个脚本跑一下 分6组，每组取215643，-1是因为有0位 flag{52048c453d794df1} 最后面的@应该要自行去掉 简单加密最后两位是AA，考虑ascii码-4为=，base64编码。所有字符转成数字-4在转成ascii码。在base64解密 最后得到答案 key{68743000650173230e4a58ee153c68e8} .!?这题没想到会是Ook!，毕竟以为Ook一定要有Ook。这里面没含有。但给的附件中文件只含有.!? 有点像 Ook.Ook!Ook? 直接找个Ook！的直接解 flag{bugku_jiami} 一段base64多重套套套套套娃=。= 奇怪的密码给了一串密文。看样式像是flag的形式，但最后多了一位，对比一下ascii可以发现。每一位相应的减去1 2 3 4就是flag。写个脚本跑一下 这不是md5给了一串字符，看着像16进制，直接拿去解。解出来就是flag 贝斯家族base家族挺大的，可以看看这篇文章 base编码家族base91最终尝试出来 告诉你个秘密给的一串像是16进制，拿去转，转完像base64，解出来。 解出来下面一串，键盘密码，围在中间。写出来就是tongyuan，大小写尝试，大写成功提交。 来自宇宙的信号提到宇宙，又是图片。对照了一下，发现银河字母中的字母跟图片比较相似。直接照着图片翻译就可。flag{nopqrst} 进制转换给了一串字符串，根据题目看如果是进制转换的。就要转换成一样的，在输出 可知b为2进制，o为8进制，d为10进制，x为16进制。写脚本转换,直接split之后存列表里。这样就能一个一个取了。然后在判断每一个的第一位是什么，之后在转成相应进制，%c输出格式化字符串 抄错字符 Crack itlinux下的shadow口令。直接用john破解就可以了 一段新闻就给了一个txt文件，但中间有一大段空白，一开始没看出来是零宽字符隐写，后来看了wp。发现了是隐藏字符加密。其实隐藏字符加密就是零宽字符隐写。 vim打开文件即可看到200b，200c，200d 解密之后发现是核心价值观，找个网站解密，解出最后的flag为 你懂我的乐谱吗？不太懂了。。开局一张五线谱，剩下全靠猜把乐谱按照给的对照图翻译出来 按图写下 在把音符排列出来 排列完了之后，把排完的图和对照的图对照起来得出flag,大写提交 affine affine"},{"title":"bugku-misc-合集","date":"2021-05-08T13:56:00.000Z","url":"/2021/05/08/bugku-misc-%E5%90%88%E9%9B%86/","tags":[["bugku","/tags/bugku/"],["misc","/tags/misc/"]],"categories":[["undefined",""]]},{"title":"用python实现qq游戏-大家来找茬辅助","date":"2021-03-07T10:30:45.000Z","url":"/2021/03/07/%E7%94%A8python%E5%AE%9E%E7%8E%B0qq%E6%B8%B8%E6%88%8F-%E5%A4%A7%E5%AE%B6%E6%9D%A5%E6%89%BE%E8%8C%AC%E8%BE%85%E5%8A%A9/","categories":[["undefined",""]],"content":"起因是因为周末闲着蛋疼，在修仙的时候，看到了这个游戏。玩了几把发现玩不过别人。苦思一晚上，第二天去网上找思路，发现有前人写过这类代码。但缺点也很明显，不够准确。基本5个不同能找到3个左右。 参考链接 流程图 前三步代码 效果图每一关运行exe。会直接显示出差异图。 之后对图像识别、opencv、cv2理解更深，再来补"},{"title":"noi-oj刷题记录第一弹1001-1020","date":"2021-02-23T08:07:00.000Z","url":"/2021/02/23/noi-oj%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E5%BC%B91001-1020/","tags":[["noi-oj","/tags/noi-oj/"]],"categories":[["undefined",""]],"content":"noi-oj 意为 全国青少年信息学奥林匹克竞赛-算法 初中的时候比过，那时候没比好。跟个憨包一样。于是现在回过头来刷刷题，记录一下 1001 1002这题用海伦公式求解，所以贴张海伦公式的图片 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012这题有应用到ascii，所以贴上ascii码表 1013 1014 1015 1016 1017 1018 1019 1020 "},{"title":"穿山甲2021冬令营","date":"2021-02-19T14:19:00.000Z","url":"/2021/02/19/%E7%A9%BF%E5%B1%B1%E7%94%B22021%E5%86%AC%E4%BB%A4%E8%90%A5/","tags":[["穿山甲2021冬令营","/tags/%E7%A9%BF%E5%B1%B1%E7%94%B22021%E5%86%AC%E4%BB%A4%E8%90%A5/"]],"categories":[["undefined",""]],"content":"web 黑宝石 ping一下试试 不可能的数字 过五关 快准狠 misc LSB!LSB! red_green 伪加密 crypto juSTFoRfun 滴滴答答的凯撒 你认识这个校徽吗 5space-rosb re HelloAndroid pwn 最简单的栈溢出 黑宝石题目就给了个描述实训描述:从前没有网络的时候IE叫黑宝石。感觉是个脑洞题，没有任何思路。加了个本地XFF。响应里要求黑宝石浏览器。就在UA里加了个Black gemstone就cat了flag ping一下试试 先fuzz。找到%0a没被过滤。然后就可以接下来的操作。自己试了下没弹回来，不晓得是什么原因。 不可能的数字截的wp里的图。简单的代码审计。php科学计数法绕过就可以了?num=1e9 过五关 快准狠一个网页内让你数有多少个A，然后提交。而且还要求时间。肯定需要脚本解决 LSB!LSB!zsteg -e导出 直接qr扫码就ok了 red_green 伪加密修改50 4b 01 02后第5位为偶数即可。保存打开即可 juSTFoRfun没有太多的信息，就给了一串U2Fsd开头的字符串和题目名。直接拿去des，aes解密，并没有解出来。观察题目名，只有大小写。尝试转成ab的形式，拿去解密培根密码。得到HI。拿去des解密解出一串。观察这一串，发现只有个下划线相关，可能是ascii位移。写个脚本操作一下。解到其他写不到文件的就不行了。然后拿到看起来比较像的一串拿去栅栏得到flag 滴滴答答的凯撒得到一个文本，先把换行转成空格，再把16进制转成ascii码。在morse解密，在栅栏得到flag。主要是观察一下。一共就三种形式2e 2d 20 你认识这个校徽吗 题目给了word和一个txt。txt名为base64，内容解密后为Unit。word里图片最后有个图片。拖到010editor里看IEND尾后还有一串奇怪的字符。且word里内容涉及到凯撒密码和维吉尼亚密码。维吉尼亚解密即可获得flag 5space-rosb 题目给了个py，py里有5个变量，n，e1，e2，c1，c2。直接上共模攻击的脚本 HelloAndroid 把apk文件拖到_onkey-decompile-apk.bat上，自动反编译。或者用jadx打开 最简单的栈溢出计算buf到r的位置为8c,又知道bash的地址为0x0804854d，直接就可以写脚本get shell了 "},{"title":"buuctf-misc系列1","date":"2021-02-15T07:03:00.000Z","url":"/2021/02/15/buuctf-misc%E7%B3%BB%E5%88%971/","tags":[["misc","/tags/misc/"],["buuctf-misc","/tags/buuctf-misc/"],["buuctf","/tags/buuctf/"]],"categories":[["undefined",""]],"content":"比较简单的misc就做个系列 签到 金三胖 二维码 N种解决方法 大白 你竟然赶我走 基础破解 乌镇峰会种图 签到直接给出来了，提交就行了 flag&#123;buu_ctf&#125; 金三胖 给了一个gif，三种方法可解。21，51，79帧处有字符，拼接得到flag stegsolve的frame browser 爱奇艺万能播放器一帧一帧看 ffmpeg -i aaa.gif img_%d.jpg flag&#123;he11ohongke&#125; 二维码得到一个二维码，扫码发现不是flag。binwalk分离发现一个zip，zip里文件名提示4位数字爆破得到7639 flag&#123;vipw_wnoei&#125; N种方法解决查壳发现不是真的exe，010editor打开发现是base64，查看前面有经典的data:image/jpg;base64。直接找个在线网站转码。QR_code解码 flag&#123;dca57f966e4e4e31fd5b15417da63269&#125; 大白 你竟然赶我走 基础破解 乌镇峰会种图"},{"title":"pip源&docker源","date":"2021-02-15T02:12:00.000Z","url":"/2021/02/15/pip%E6%BA%90-docker%E6%BA%90/","tags":[["pip源&docker源","/tags/pip%E6%BA%90-docker%E6%BA%90/"]],"categories":[["undefined",""]],"content":"windows下永久配置pip源进入C:\\Users\\Administrator新建pip文件夹，新建pip.ini文件pip.ini文件内容 列出配置文件查看是否生效 linux下永久配置pip源cd ~进入用户家目录，mkdir -p .pip创建.php文件夹,vim pip.confpip.conf文件内容 windows，linux下pip临时更改源 linux下配置docker源 拉取镜像的时候很慢，就配了个国内的docker镜像加速,vim /etc/docker/daemon.json "},{"title":"关于我","date":"2021-02-11T02:13:00.000Z","url":"/2021/02/11/hello-world/","tags":[["关于我","/tags/%E5%85%B3%E4%BA%8E%E6%88%91/"]],"categories":[["undefined",""]],"content":"欢迎来到我的小窝，某不知名的弟弟。ctf小手子，主打misc和crypto。其余类型随缘做做。挖洞小菜罢了，目前还是一张上交证书。 关于这个博客，之前自己都是用印象笔记记笔记。也没有开别的博客分享啥的，现在就做开这个博客做记录了。用于记录平时的学习和当作一个笔记的作用吧 博客采用Hexo搭建 主题是Candinya的 Kratos-Rebirth"}]